From: Simon McVittie <smcv@debian.org>
Date: Sun, 19 Jan 2014 00:33:02 +0000
Subject: Use integer constant expressions for array sizes

ISO C requires it, and gcc warns. The scale factors cancel out:
    kHz * ms = 1000 Hz * (1/1000) s = Hz * s
---
 gain_analysis.c | 20 +++++++++++++-------
 1 file changed, 13 insertions(+), 7 deletions(-)

--- a/gain_analysis.c
+++ b/gain_analysis.c
@@ -1,7 +1,7 @@
 /*
  *  ReplayGainAnalysis - analyzes input samples and give the recommended dB change
  *  Copyright (C) 2001-2009 David Robinson and Glen Sawyer
- *  Improvements and optimizations added by Frank Klemm, and by Marcel Müller 
+ *  Improvements and optimizations added by Frank Klemm, and by Marcel Mï¿½ller
  *
  *  This library is free software; you can redistribute it and/or
  *  modify it under the terms of the GNU Lesser General Public
@@ -105,13 +105,17 @@
 #define YULE_FILTER     filterYule
 #define BUTTER_FILTER   filterButter
 #define RMS_PERCENTILE      0.95        // percentile which is louder than the proposed level
-#define MAX_SAMP_FREQ_KHZ  96           // maximum allowed sample frequency [kHz]
+#define MAX_SAMP_FREQ_kHz  96           // maximum allowed sample frequency [kHz]
+#define MAX_SAMP_FREQ     (1000. * (double) MAX_SAMP_FREQ_kHz)  // same, in Hz
 #define RMS_WINDOW_TIME_MS 50           // Time slice size [ms]
-#define STEPS_per_dB      100           // Table entries per dB
-#define MAX_dB            120           // Table entries for 0...MAX_dB (normal max. values are 70...80 dB)
+#define RMS_WINDOW_TIME   (((double) RMS_WINDOW_TIME_MS) / 1000.) // same, in s
+#define STEPS_per_dB_int  100           // Table entries per dB
+#define STEPS_per_dB      ((double) STEPS_per_dB_int)
+#define MAX_dB_int        120           // Table entries for 0...MAX_dB (normal max. values are 70...80 dB)
+#define MAX_dB            ((double) MAX_dB_int)
 
 #define MAX_ORDER               (BUTTER_ORDER > YULE_ORDER ? BUTTER_ORDER : YULE_ORDER)
-#define MAX_SAMPLES_PER_WINDOW  (size_t) (MAX_SAMP_FREQ_KHZ * RMS_WINDOW_TIME_MS + 1)      // max. Samples per Time slice
+#define MAX_SAMPLES_PER_WINDOW  (MAX_SAMP_FREQ_kHz * RMS_WINDOW_TIME_MS + 1)      // max. Samples per Time slice
 #define PINK_REF                64.82 //298640883795                              // calibration value
 
 Float_t          linprebuf [MAX_ORDER * 2];
@@ -132,8 +136,8 @@
 double           rsum;
 int              freqindex;
 int              first;
-static Uint32_t  A [(size_t)(STEPS_per_dB * MAX_dB)];
-static Uint32_t  B [(size_t)(STEPS_per_dB * MAX_dB)];
+static Uint32_t  A [(size_t)(STEPS_per_dB_int * MAX_dB_int)];
+static Uint32_t  B [(size_t)(STEPS_per_dB_int * MAX_dB_int)];
 
 // for each filter:
 // [0] 48 kHz, [1] 44.1 kHz, [2] 32 kHz, [3] 24 kHz, [4] 22050 Hz, [5] 16 kHz, [6] 12 kHz, [7] is 11025 Hz, [8] 8 kHz
@@ -220,10 +224,10 @@
 
 static void
 filterButter (const Float_t* input, Float_t* output, size_t nSamples, const Float_t* kernel)
-{   
+{
 
     while (nSamples--) {
-        *output =  
+        *output =
            input [0]  * kernel[0]
          - output[-1] * kernel[1]
          + input [-1] * kernel[2]
