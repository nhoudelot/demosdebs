From: Simon McVittie <smcv@debian.org>
Date: Sun, 19 Jan 2014 00:33:02 +0000
Subject: Use integer constant expressions for array sizes

ISO C requires it, and gcc warns. The scale factors cancel out:
    kHz * ms = 1000 Hz * (1/1000) s = Hz * s
---
 mp3gain/gain_analysis.c | 20 +++++++++++++-------
 1 file changed, 13 insertions(+), 7 deletions(-)

diff --git a/mp3gain/gain_analysis.c b/mp3gain/gain_analysis.c
index e6e4e40..7f36645 100644
--- a/mp3gain/gain_analysis.c
+++ b/mp3gain/gain_analysis.c
@@ -105,13 +105,19 @@ typedef signed int      Int32_t;
 #define YULE_FILTER     filterYule
 #define BUTTER_FILTER   filterButter
 #define RMS_PERCENTILE      0.95        // percentile which is louder than the proposed level
-#define MAX_SAMP_FREQ   96000.          // maximum allowed sample frequency [Hz]
-#define RMS_WINDOW_TIME     0.050       // Time slice size [s]
-#define STEPS_per_dB      100.          // Table entries per dB
-#define MAX_dB            120.          // Table entries for 0...MAX_dB (normal max. values are 70...80 dB)
+
+#define MAX_SAMP_FREQ_kHz 96            // maximum allowed sample frequency [kHz]
+#define MAX_SAMP_FREQ     (1000. * (double) MAX_SAMP_FREQ_kHz)  // same, in Hz
+#define RMS_WINDOW_TIME_ms 50           // Time slice size [ms]
+#define RMS_WINDOW_TIME   (((double) RMS_WINDOW_TIME_ms) / 1000.) // same, in s
+
+#define STEPS_per_dB_int  100           // Table entries per dB
+#define STEPS_per_dB      ((double) STEPS_per_dB_int)
+#define MAX_dB_int        120           // Table entries for 0...MAX_dB (normal max. values are 70...80 dB)
+#define MAX_dB            ((double) MAX_dB_int)
 
 #define MAX_ORDER               (BUTTER_ORDER > YULE_ORDER ? BUTTER_ORDER : YULE_ORDER)
-#define MAX_SAMPLES_PER_WINDOW  (size_t) (MAX_SAMP_FREQ * RMS_WINDOW_TIME + 1)      // max. Samples per Time slice
+#define MAX_SAMPLES_PER_WINDOW  (MAX_SAMP_FREQ_kHz * RMS_WINDOW_TIME_ms + 1)      // max. Samples per Time slice
 #define PINK_REF                64.82 //298640883795                              // calibration value
 
 Float_t          linprebuf [MAX_ORDER * 2];
@@ -132,8 +138,8 @@ double           lsum;
 double           rsum;
 int              freqindex;
 int              first;
-static Uint32_t  A [(size_t)(STEPS_per_dB * MAX_dB)];
-static Uint32_t  B [(size_t)(STEPS_per_dB * MAX_dB)];
+static Uint32_t  A [(size_t)(STEPS_per_dB_int * MAX_dB_int)];
+static Uint32_t  B [(size_t)(STEPS_per_dB_int * MAX_dB_int)];
 
 // for each filter:
 // [0] 48 kHz, [1] 44.1 kHz, [2] 32 kHz, [3] 24 kHz, [4] 22050 Hz, [5] 16 kHz, [6] 12 kHz, [7] is 11025 Hz, [8] 8 kHz
