--- a/src/GestDsk.cpp
+++ b/src/GestDsk.cpp
@@ -12,7 +12,7 @@
 #include <cerrno>
 
 #ifdef _MSC_VER
-#define snprintf _snprintf 
+#define snprintf _snprintf
 #endif
 
 using namespace std;
@@ -32,24 +32,24 @@
 	CheckSumFile = Buf[ 0x43 ] + Buf[ 0x43 +1 ] *256;
     for ( i = 0; i < 67; i++ )
 		Checksum += Buf[ i ];
-	
+
     if ( ( CheckSumFile == ( unsigned short )Checksum ) && Checksum )
         ModeAmsdos = true;
-	
+
     return( ModeAmsdos );
 }
 
 
 
 //
-// Crée une en-tête AMSDOS par défaut
+// Cr√©e une en-t√™te AMSDOS par d√©faut
 //
 StAmsdos * CreeEnteteAmsdos( char * NomFic, unsigned short Longueur ) {
     static char NomReel[ 256 ];
     static StAmsdos Entete;
     static char Nom[ 12 ];
     int i;
-	
+
     strcpy( NomReel, NomFic );
     memset( &Entete, 0, sizeof( Entete ) );
     memset( Nom, ' ', sizeof( Nom ) );
@@ -62,20 +62,20 @@
     p = strchr( NomReel, '.' );
     if ( p )
         * p++ = 0;
-	
+
     int l = strlen( NomReel );
     if ( l > 8 )
         l = 8;
-	
+
     for ( int i = 0; i < l; i++ )
         Nom[ i ] = ( char )toupper( NomReel[ i ] );
-	
+
     if ( p )
         for ( i = 0; i < 3; i++ )
             Nom[ i + 8 ] = ( char )toupper( p[ i ] );
-	
+
     memcpy( Entete.FileName, Nom, 11 );
-    Entete.Length = 0; 	//Non renseignÈ par AMSDos !!
+    Entete.Length = 0; 	//Non renseign√© par AMSDos !!
     Entete.RealLength = Entete.LogicalLength = Longueur;
     Entete.FileType = 2; //Fichier binaire
 
@@ -93,7 +93,7 @@
     unsigned char * p = ( unsigned char * )pEntete;
     for ( i = 0; i < 67; i++ )
         Checksum += * (p+i);
-	
+
     pEntete->CheckSum = ( unsigned short )Checksum;
 }
 
@@ -110,7 +110,7 @@
         memset( pEntete->Unused2, 0, sizeof( pEntete->Unused2 ) );
         for ( i = 0; i < 67; i++ )
             Checksum += Buf[ i ];
-		
+
 		Buf[ 0x43 ] = ( unsigned short )Checksum;
 	}
 }
@@ -124,7 +124,7 @@
     for ( int s = 0; s < tr->NbSect; s++ )
         if ( Sect > tr->Sect[ s ].R )
             Sect = tr->Sect[ s ].R;
-	
+
     return( Sect );
 }
 
@@ -171,7 +171,7 @@
 
 
 //
-// Recherche une entrée de répertoire libre
+// Recherche une entr√©e de r√©pertoire libre
 //
 int DSK::RechercheDirLibre( void ) {
     for ( int i = 0; i < 64; i++ ) {
@@ -184,7 +184,7 @@
 
 
 //
-// Retourne les données "brutes" de l'image disquette
+// Retourne les donn√©es "brutes" de l'image disquette
 //
 unsigned char * DSK::GetRawData( int Pos ) {
     return( &ImgDsk[ Pos ] );
@@ -192,7 +192,7 @@
 
 
 //
-// Ecriture de données "brutes" dans l'image disquette
+// Ecriture de donn√©es "brutes" dans l'image disquette
 //
 void DSK::WriteRawData( int Pos, unsigned char * Data, int Longueur ) {
     memcpy( &ImgDsk[ Pos ], Data, Longueur );
@@ -242,14 +242,14 @@
     else
         if ( MinSect == 0x01 )
             track++;
-	
+
     int Pos = GetPosData( track, sect + MinSect, true );
     memcpy( BufBloc, &ImgDsk[ Pos ], SECTSIZE );
     if ( ++sect > 8 ) {
         track++;
         sect = 0;
 	}
-	
+
     Pos = GetPosData( track, sect + MinSect, true );
     memcpy( &BufBloc[ SECTSIZE ], &ImgDsk[ Pos ], SECTSIZE );
     return( BufBloc );
@@ -310,16 +310,16 @@
     else
         if ( MinSect == 0x01 )
             track++;
-	
+
     //
-    // Ajuste le nombre de pistes si dépassement capacité
+    // Ajuste le nombre de pistes si d√©passement capacit√©
     //
     CPCEMUEnt * Entete = ( CPCEMUEnt * )ImgDsk;
     if ( track > Entete->NbTracks - 1 ) {
         Entete->NbTracks = ( unsigned char )( track + 1 );
         FormatTrack( Entete, track, MinSect, 9 );
 	}
-	
+
     int Pos = GetPosData( track, sect + MinSect, true );
     memcpy( &ImgDsk[ Pos ], BufBloc, SECTSIZE );
     if ( ++sect > 8 ) {
@@ -341,7 +341,7 @@
     else
         if ( ( MinSect == 0x01 ) && AmsdosMode )
             Track++;
-	
+
     int Pos = GetPosData( Track, Sect + MinSect, AmsdosMode );
     memcpy( &ImgDsk[ Pos ], Buff, SECTSIZE );
 }
@@ -357,7 +357,7 @@
     else
         if ( ( MinSect == 0x01 ) && AmsdosMode )
             Track++;
-	
+
     int Pos = GetPosData( Track, Sect + MinSect, AmsdosMode );
     return( &ImgDsk[ Pos ] );
 }
@@ -371,7 +371,7 @@
     CPCEMUTrack * tr = ( CPCEMUTrack * )&ImgDsk[ Pos ];
     for ( int t = 0; t < Track; t++ ) {
 		Pos += sizeof( CPCEMUTrack );
-		
+
 	    for ( int s = 0; s < tr->NbSect; s++ ) {
             if ( tr->Sect[ s ].SizeByte )
                 Pos += tr->Sect[ s ].SizeByte;
@@ -383,12 +383,12 @@
 }
 
 //
-// Remplit un "bitmap" pour savoir où il y a des fichiers sur la disquette
-// Retourne également le nombre de Ko utilisés sur la disquette
+// Remplit un "bitmap" pour savoir o√π il y a des fichiers sur la disquette
+// Retourne √©galement le nombre de Ko utilis√©s sur la disquette
 //
 int DSK::FillBitmap( void ) {
     int NbKo = 0;
-	
+
     memset( Bitmap, 0, sizeof( Bitmap ) );
     Bitmap[ 0 ] = Bitmap[ 1 ] = 1;
     for ( int i = 0; i < 64; i++ ) {
@@ -408,7 +408,7 @@
 
 
 //
-// Positionne une entrée dans le répertoire
+// Positionne une entr√©e dans le r√©pertoire
 //
 void DSK::SetInfoDirEntry( int NumDir, StDirEntry * Dir ) {
     int MinSect = GetMinSect();
@@ -416,8 +416,8 @@
     int t = ( MinSect == 0x41 ? 2 : 0 );
     if ( MinSect == 1 )
         t = 1;
-	
-    for (int i =0; i<16; i++) 
+
+    for (int i =0; i<16; i++)
 		memcpy( &ImgDsk[ ( ( NumDir & 15 ) << 5 ) + GetPosData( t, s, true ) ]
 				, Dir
 				, sizeof( StDirEntry )
@@ -426,17 +426,17 @@
 
 
 //
-// Vérifie l'existente d'un fichier, retourne l'indice du fichier si existe,
+// V√©rifie l'existente d'un fichier, retourne l'indice du fichier si existe,
 // -1 sinon
 //
 int DSK::FileExist( char * Nom ) {
 	int i;
 	for ( i = 0; i < 64; i++ ) {
-		StDirEntry * Dir = GetInfoDirEntry( i ); 
+		StDirEntry * Dir = GetInfoDirEntry( i );
 		for(int q=0;q<12;q++)
 		    Dir->Nom[q]=Dir->Nom[q]&127; // Avoid missing hidden files
-		if (  Dir->User != USER_DELETED 
-			  && ! strncmp( Nom, ( char * )Dir->Nom, 11 ) // 11 = 8+3 car le point est enlevÈ
+		if (  Dir->User != USER_DELETED
+			  && ! strncmp( Nom, ( char * )Dir->Nom, 11 ) // 11 = 8+3 car le point est enlev√©
 			  )
 			return( i );
 	}
@@ -447,7 +447,7 @@
 StDirEntry * DSK::GetNomDir( string NomFic ) {
     static StDirEntry DirLoc;
     int i;
-	
+
     memset( &DirLoc, 0, sizeof( DirLoc ) );
     memset( DirLoc.Nom, ' ', 8 );
     memset( DirLoc.Ext, ' ', 3 );
@@ -460,7 +460,7 @@
     }
     else
         NomFic.copy( DirLoc.Nom, std::min((int)NomFic.size(), 8 ),0);
-	
+
     for ( i = 0; i < 11; i++ )
         DirLoc.Nom[ i ] = ( unsigned char )toupper( DirLoc.Nom[ i ] );
 
@@ -481,18 +481,18 @@
 int DSK::CopieFichier( unsigned char * BufFile, char * NomFic, int TailleFic, int MaxBloc, int UserNumber, bool System_file, bool Read_only ) {
     int j, l, Bloc, PosFile, NbPages = 0, PosDir, TaillePage;
     FillBitmap();
-    StDirEntry * DirLoc = GetNomDir( NomFic ); 	//Construit l'entrÈe pour mettre dans le catalogue
+    StDirEntry * DirLoc = GetNomDir( NomFic ); 	//Construit l'entr√©e pour mettre dans le catalogue
     for ( PosFile = 0; PosFile < TailleFic; ) { //Pour chaque bloc du fichier
-        PosDir = RechercheDirLibre(); 		//Trouve une entrÈe libre dans le CAT
+        PosDir = RechercheDirLibre(); 		//Trouve une entr√©e libre dans le CAT
         if ( PosDir != -1 ) {
-            DirLoc->User = UserNumber;			//Remplit l'entrÈe : User 0
+            DirLoc->User = UserNumber;			//Remplit l'entr√©e : User 0
     	    if(System_file) DirLoc->Nom[9]|=0x80;
             if(Read_only) DirLoc->Nom[8]|=0x80;
-            DirLoc->NumPage = ( unsigned char )NbPages++;	// NumÈro de l'entrÈe dans le fichier
+            DirLoc->NumPage = ( unsigned char )NbPages++;	// Num√©ro de l'entr√©e dans le fichier
             TaillePage = (TailleFic - PosFile + 127) >> 7 ;	// Taille de la page (on arrondit par le haut)
             if ( TaillePage > 128 )				// Si y'a plus de 16k il faut plusieurs pages
                 TaillePage = 128;
-			
+
             DirLoc->NbPages = ( unsigned char )TaillePage;
             l = ( DirLoc->NbPages + 7 ) >> 3; //Nombre de blocs=TaillePage/8 arrondi par le haut
             memset( DirLoc->Blocks, 0, 16 );
@@ -505,7 +505,7 @@
 		}
                 else
                     return( ERR_NO_BLOCK );
-				
+
 	    }
             SetInfoDirEntry( PosDir, DirLoc );
 	}
@@ -517,7 +517,7 @@
 
 
 //
-// Retourne une entrée du répertoire
+// Retourne une entr√©e du r√©pertoire
 //
 StDirEntry * DSK::GetInfoDirEntry( int NumDir ) {
     static StDirEntry Dir;
@@ -526,7 +526,7 @@
     int t = ( MinSect == 0x41 ? 2 : 0 );
     if ( MinSect == 1 )
         t = 1;
-	
+
     memcpy( &Dir
 			, &ImgDsk[ ( ( NumDir & 15 ) << 5 ) + GetPosData( t, s, true ) ]
 			, sizeof( StDirEntry )
@@ -536,7 +536,7 @@
 
 
 //
-// Vérifier si DSK est "standard" (DATA ou VENDOR)
+// V√©rifier si DSK est "standard" (DATA ou VENDOR)
 //
 bool DSK::CheckDsk( void ) {
     CPCEMUEnt * Infos = ( CPCEMUEnt * )ImgDsk;
@@ -547,16 +547,16 @@
 			cout << "DSK has wrong sector number!" << endl;
             return( false );
 		}
-		
-       
+
+
         if ( Infos->NbTracks > 42 )
             Infos->NbTracks = 42;
-		
+
         for ( int track = 0; track < Infos->NbTracks; track++ ) {
             // Recherche position secteur
             int Pos = sizeof( CPCEMUEnt ) + ( 0x1200 + sizeof( CPCEMUTrack ) ) * track;
             CPCEMUTrack * tr = ( CPCEMUTrack * )&ImgDsk[ Pos ];
-			
+
             int MinSect = 0xFF, MaxSect = 0;
             if ( tr->NbSect != 9 )
 			{
@@ -566,7 +566,7 @@
             for ( int s = 0; s < (int)tr->NbSect; s++ ) {
                 if ( MinSect > tr->Sect[ s ].R )
                     MinSect = tr->Sect[ s ].R;
-				
+
                 if ( MaxSect < tr->Sect[ s ].R )
                     MaxSect = tr->Sect[ s ].R;
 			}
@@ -596,7 +596,7 @@
     CPCEMUEnt * Infos;
 	if(sizeof(CPCEMUEnt) != 0x100) cout << "INVALID DSK BUILD" << endl;
     FILE* fp ;
-	
+
     if ( (fp=fopen(NomFic.c_str(),"rb"))!=NULL ) {
 		fread(ImgDsk,sizeof(ImgDsk),1,fp);
 		Infos = ( CPCEMUEnt * )ImgDsk;
@@ -616,15 +616,15 @@
 //
 void DSK::FormatDsk( int NbSect, int NbTrack ) {
     CPCEMUEnt * Infos = ( CPCEMUEnt * )ImgDsk;
-	
+
     strcpy( Infos->debut, "MV - CPCEMU Disk-File\r\nDisk-Info\r\n" );
     Infos->DataSize = ( short )( sizeof( CPCEMUTrack ) + (0x200 * NbSect) );
     Infos->NbTracks = ( unsigned char ) NbTrack;
     Infos->NbHeads = 1;
     for ( int t = 0; t < NbTrack; t++ )
         FormatTrack( Infos, t, 0xC1, NbSect );
-    
-	
+
+
     FillBitmap();
 }
 
@@ -636,13 +636,13 @@
 void DSK::FixEndianDsk( bool littleToBig) {
     CPCEMUEnt * Infos = ( CPCEMUEnt * )ImgDsk;
 	//std::cerr<< "FixEndianDsk() Infos->DataSize : " << Infos->DataSize <<std::endl;
-	
-	if ( ! littleToBig ) 
-		Infos->DataSize = FIX_SHORT( Infos->DataSize );	
+
+	if ( ! littleToBig )
+		Infos->DataSize = FIX_SHORT( Infos->DataSize );
     for ( int t = 0; t < Infos->NbTracks; t++ )
         FixEndianTrack( Infos, t, 9 );
-	if ( littleToBig )	
-		Infos->DataSize = FIX_SHORT( Infos->DataSize );		
+	if ( littleToBig )
+		Infos->DataSize = FIX_SHORT( Infos->DataSize );
 	FillBitmap();
 }
 
@@ -658,7 +658,7 @@
 		tr = ( CPCEMUTrack * )&ImgDsk[ sizeof( CPCEMUEnt ) + t * ExtendedDataSize ];
 	}
 	int ss = 0;
-	
+
     //
     // Gestion "entrelacement" des secteurs
     //
@@ -683,18 +683,18 @@
     CPCEMUEnt * Infos = ( CPCEMUEnt * )ImgDsk;
     FILE* fp;
     int Taille,Copie;
-    
-    
+
+
     if ( (fp=fopen(NomDsk.c_str(),"wb+")) != NULL) {
 		if ( ! Infos->DataSize ) Infos->DataSize = 0x100 + SECTSIZE * 9;
         Taille = Infos->NbTracks * Infos->DataSize + sizeof( * Infos );
         if ( isBigEndian() ) FixEndianDsk( true ) ; // Fix endianness for Big endian machines (PPC)
-		
+
 		if ( (Copie=(fwrite(ImgDsk,1,Taille,fp))) !=Taille ) ;
 		fclose(fp);
 		// in case of the same DSK image stay in memory
         if ( isBigEndian() ) FixEndianDsk( false ) ; // unFix endianness for Big endian machines (PPC)
-		
+
         return( true );
 	}
     return( false );
@@ -732,9 +732,9 @@
 	for ( int i=0;i < (int)tr->NbSect ; i++) {
 		tr->Sect[i] = CPCEMUSectEndian( tr->Sect[i] );
 	}
-	
+
 	return ( tr);
-	
+
 }
 
 
@@ -751,16 +751,16 @@
         switch( Ams->FileType ) {
             case 0 :    // BASIC
 				return( "BASIC"); //GetTexteLoc( 22, Langue ) );
-				
+
             case 1 :    // BASIC (P)
 				return( "BASIC(P)"); // GetTexteLoc( 23, Langue ) );
-				
+
             case 2 :    // BINAIRE
 				return("BINAIRE"); // GetTexteLoc( 24, Langue ) );
-				
+
             case 3 :    // BINAIRE (P)
                 return( "BINAIRE(P)"); //GetTexteLoc( 25, Langue ) );
-				
+
             default :
 				return( "INCONNU"); // GetTexteLoc( 26, Langue ) );
             }
@@ -771,15 +771,15 @@
 char * DSK::GetEntryNameInCatalogue ( int num , char* Nom ) {
 	int PosItem[ 64 ];
 	StDirEntry TabDir[ 64 ];
-	
+
 	memset( PosItem, 0, sizeof( PosItem ) );
-	
+
 	for ( int i = 0; i < 64; i++ )
 		memcpy( &TabDir[ i ], GetInfoDirEntry( i ), sizeof( StDirEntry ));
-	
+
 	for ( int i = 0; i < 64; i++ ) {
 		SetInfoDirEntry( i, &TabDir[ i ] );
-		
+
 		if ( TabDir[ i ].User != USER_DELETED && ! TabDir[ i ].NumPage && num == i) {
 			memcpy( Nom, TabDir[ i ].Nom, 8 );
 			memcpy( &Nom[ 9 ], TabDir[ i ].Ext, 3 );
@@ -788,7 +788,7 @@
 			for ( int j = 0; j < 12; j++ )
 				Nom[ j ] &= 0x7F;
 			for ( int j = 0; j < 12; j++ )
-				if ( ! isprint( Nom[ j ] ) ) 
+				if ( ! isprint( Nom[ j ] ) )
 					Nom[ j ] = '?' ;
 			return Nom;
 		}
@@ -799,21 +799,21 @@
 char * DSK::GetEntrySizeInCatalogue ( int num , char* Size ) {
 	int PosItem[ 64 ];
 	StDirEntry TabDir[ 64 ];
-	
-	
+
+
 	memset( PosItem, 0, sizeof( PosItem ) );
-	
+
 	for ( int i = 0; i < 64; i++ )
 		memcpy( &TabDir[ i ], GetInfoDirEntry( i ), sizeof( StDirEntry ));
-	
+
 	for ( int i = 0; i < 64; i++ ) {
 		SetInfoDirEntry( i, &TabDir[ i ] );
-		
+
 		if ( TabDir[ i ].User != USER_DELETED && ! TabDir[ i ].NumPage && num == i) {
 			int p = 0, t = 0;
             		do {
 				if ( TabDir[ p + i ].User == TabDir[ i ].User ) {
-					t += TabDir[ p + i ].NbPages; 
+					t += TabDir[ p + i ].NbPages;
 				}
 				p++;
 			}
@@ -834,14 +834,14 @@
 	int cumul=0;
 	FILE* f;
 	StDirEntry TabDir[ 64 ];
-	
+
 	if ( (f=fopen(path,"wb"))==NULL )
 		return false;
-	
+
 	for ( int i = 0; i < 64; i++ )
 		memcpy( &TabDir[ i ], GetInfoDirEntry( i ), sizeof( StDirEntry ));
-		
-		
+
+
 	memset( NomIndice, 0 , sizeof( NomIndice ) );
 	strncpy( NomIndice, GetNomAmsdos( TabDir[ i ].Nom ), 16);
 	strncat( NomIndice, GetNomAmsdos( TabDir[ i ].Ext), 3);
@@ -857,17 +857,17 @@
 			if ( NbOctets > 0 ) {
 				fwrite(p,1,NbOctets,f);
 				cumul+=NbOctets;
-			}	
+			}
 			lMax -= 1024;
         }
 		memset( current , 0, sizeof( current ) );
 		i++;
 		strncpy(current, GetNomAmsdos( TabDir[ i ].Nom ), 16 );
 		strncat(current, GetNomAmsdos( TabDir[ i ].Ext ), 3);
-		
+
 		if ( i > 64 ) return false;
     }while (! strncmp( NomIndice, current , max( strlen( NomIndice ), strlen( current ) )));
-	
+
 	fclose (f);
 	return true;
 }
@@ -881,7 +881,7 @@
 	FILE* Hfile;
 	if ( NULL==(cFileName = (char*)malloc(16*sizeof(char))) )
 		return false;
-	
+
 	cFileName = GetNomAmsdos((char *)Masque.c_str());
 	if ((  Hfile = fopen(Masque.c_str(),"rb")) == NULL ) return false;
         Lg=fread(Buff,1, 0x20000 ,Hfile);
@@ -893,15 +893,15 @@
 		free(cFileName);
 		return false;
 	}
-		
+
         //
         // Regarde si le fichier contient une en-tete ou non
         //
         bool IsAmsdos = CheckAmsdos( Buff );
-      
+
       	if ( ! IsAmsdos ) {
 		// Creer une en-tete amsdos par defaut
-		cout << "CrÈation automatique d'une en-tÍte pour le fichier ...\n";
+		cout << "Cr√©ation automatique d'une en-t√™te pour le fichier ...\n";
 		e = CreeEnteteAmsdos( cFileName, ( unsigned short )Lg );
 		if ( loadAdress != 0)
 		{
@@ -919,7 +919,7 @@
         if ( isBigEndian() ) e = StAmsdosEndian(e);
 	}
 	else
-		cout << "Le fichier a dÈj‡ une en-tÍte\n";
+		cout << "Le fichier a d√©jŒ± une en-t√™te\n";
         //
         // En fonction du mode d'importation...
         //
@@ -934,38 +934,38 @@
 				Lg -= sizeof( StAmsdos );
 			}
 		break;
-				
+
 		case MODE_BINAIRE :
 			//
 			// Importation en mode BINAIRE
 			//
-				
+
 			if ( ! IsAmsdos )
 				//
 				// Indique qu'il faudra ajouter une en-tete
 				//
 				AjouteEntete = true;
 		break;
-				
+
 	}
-		
+
         //
         // Si fichier ok pour etre import
         //
         if ( AjouteEntete ) {
         	// Ajoute l'en-tete amsdos si necessaire
-        	
+
 		memmove( &Buff[ sizeof( StAmsdos ) ], Buff, Lg );
                	memcpy( Buff, e, sizeof( StAmsdos ) );
                	Lg += sizeof( StAmsdos );
 	}
 
-	//if (MODE_BINAIRE) ClearAmsdos(Buff); //Remplace les octets inutilisÈs par des 0 dans l'en-tÍte
+	//if (MODE_BINAIRE) ClearAmsdos(Buff); //Remplace les octets inutilis√©s par des 0 dans l'en-t√™te
 
         if ( CopieFichier( Buff,cFileName,Lg,256, UserNumber, System_file, Read_only) != ERR_NO_ERR )
 		ret = false;
-	else 
-		ret = true;	
+	else
+		ret = true;
 
 	return ret;
 }
@@ -980,19 +980,19 @@
 	int i = nItem;
 	bool FirstBlock = true;
 	StDirEntry TabDir[ 64 ];
-	
+
 	for ( int j = 0; j < 64; j++ )
 		memcpy( &TabDir[ j ], GetInfoDirEntry( j ), sizeof( StDirEntry ));
-	
+
 	memset( NomFic, 0 , sizeof( NomFic ) );
 	strncpy( NomFic, GetNomAmsdos( TabDir[ i ].Nom ), 16);
 	strncat( NomFic, GetNomAmsdos( TabDir[ i ].Ext), 3);
 
 	int lMax = sizeof( BufFile );
-	
+
 	TailleFic = 0;
-	
-	
+
+
 	do
 	{
         // Longueur du fichier
@@ -1007,12 +1007,12 @@
 					memcpy( p  , &p[ 0x80 ]  , TailleBloc  );
 				}
 				FirstBlock = false;
-				
+
 			}
 			int NbOctets = min( lMax, TailleBloc );
 			if ( NbOctets > 0 ) {
 				memcpy( &BufFile[ LongFic ], p, NbOctets );
-				LongFic += NbOctets;     
+				LongFic += NbOctets;
 			}
 			lMax -= 1024;
 		}
@@ -1022,7 +1022,7 @@
 		strncat(current, GetNomAmsdos( TabDir[ i ].Ext ), 3);
 		if ( i > 64 ) return false;
 	}while( ! strncmp( NomFic, current, max( strlen( current ), strlen( NomFic ) ) ) );
-	
+
 	if ( TailleFic == 0 )
 		TailleFic = LongFic;
 	return true;
@@ -1034,23 +1034,23 @@
 	int TailleCourante=0;
 	char OffSet[ 7 ];
 	const char * CodeHexa = "0123456789ABCDEF";
-	
+
 	while (TailleCourante <=  TailleFic ) {
-		// display the offset 
+		// display the offset
 		memset( OffSet, 0 , 7 );
 		snprintf( OffSet,6,"#%.4X:", TailleCourante );
 		strcat( Listing, OffSet );
 		strcat( Listing, " ");
-		char Ascii[ 18 ]; 
+		char Ascii[ 18 ];
 		char Hex[ 16 *3 +1 ];
 		memset( Ascii, 0 , 18 );
 		memset( Hex , 0 , ( 16*3 +1) );
 		for ( int i=0; i<16 ; ++i ) {
 			unsigned char cur = BufFile[ TailleCourante + i ];
 			// manage the ascii display
-			if ( cur > 32 && cur < 125 ) 
+			if ( cur > 32 && cur < 125 )
 				Ascii[ i ] = cur;
-			else 
+			else
 				Ascii[ i ] = '.';
 			char Val[ 4 ];
 			// manage the hexadeciaml display
@@ -1064,9 +1064,9 @@
 		strcat( Listing, Hex );
 		strcat( Listing, "| ");
 		strcat( Listing, Ascii );
-		TailleCourante += 16; 
+		TailleCourante += 16;
 	}
-	
+
 	return true;
 }
 
@@ -1075,20 +1075,20 @@
 	char NomFic[ 16 ];
 	int i = item;
 	StDirEntry TabDir[ 64 ];
-	
+
 	for ( int j = 0; j < 64; j++ )
 		memcpy( &TabDir[ j ], GetInfoDirEntry( j ), sizeof( StDirEntry ));
-		
+
 	strcpy( NomFic, GetNomAmsdos( TabDir[ i ].Nom ) );
 	char *p ;
-	
+
 	do {
 		TabDir[ i ].User = USER_DELETED;
 		SetInfoDirEntry( i, &TabDir[ i ]);
 		p = GetNomAmsdos( TabDir[ ++i ].Nom) ;
 	} while ( ! strncmp( NomFic, p , max(strlen( p ), strlen( NomFic ) )) );
-	
-		
+
+
 	return ;
 }
 
@@ -1101,30 +1101,30 @@
 	int c = item;
 	for ( int j = 0; j < 64; j++ )
 		memcpy( &TabDir[ j ], GetInfoDirEntry( j ), sizeof( StDirEntry ));
-		
+
 	memset( DirLoc.Nom, ' ', 8);
 	memset( DirLoc.Ext, ' ', 3);
 	for ( int i=0; i<(int) strlen( NewName ) ; ++i)
 		NewName[ i ] = toupper( NewName[ i ] );
-		
+
 	char *p = strchr( NewName, '.');
-	
+
 	if ( p ) {
 		p++;
 		memcpy( DirLoc.Nom, NewName, p - NewName -1);
 		memcpy( DirLoc.Ext, p, std::min((int)strlen(p),3) );
-	}	
+	}
 	else {
 		memcpy( DirLoc.Nom, NewName, min( (int)strlen( NewName) , 8 ) );
 	}
 	strcpy( NomFic, GetNomAmsdos( TabDir[ c ].Nom ));
-	
+
 	do {
 		memcpy( TabDir[ c ].Nom , DirLoc.Nom , 8 );
 		memcpy( TabDir[ c ].Ext , DirLoc.Ext, 3 );
 		SetInfoDirEntry( c, &TabDir[ c ]);
 		p = GetNomAmsdos( TabDir[ ++c ].Nom );
-	}while (!strncmp( NomFic, p , max(strlen(p),strlen(NomFic))));		
+	}while (!strncmp( NomFic, p , max(strlen(p),strlen(NomFic))));
 }
 
 
@@ -1140,7 +1140,7 @@
 	// Trier les fichiers
 	for ( int i = 0; i < 64; i++ ) {
 		//
-		// Afficher les fichiers non effacÈs
+		// Afficher les fichiers non effac√©s
 		//
 		if ( TabDir[ i ].User != USER_DELETED && ! TabDir[ i ].NumPage ) {
 			char Nom[ 13 ];
@@ -1155,12 +1155,12 @@
 			{
 				Nom[ j ] &= 0x7F;
 
-				if ( ! isprint( Nom[ j ] ) ) 
+				if ( ! isprint( Nom[ j ] ) )
 					Nom[ j ] = '?' ;
 			}
 
 			catalogue += Nom;
-			catalogue += " "; 
+			catalogue += " ";
 			ostringstream c;
 			c << (int)TabDir[i].User;
 			catalogue += c.str();
