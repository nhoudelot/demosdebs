Description: migrate to SDL2
 Migrate from SDL1.2 to SDL2
Author: Nicolas HOUDELOT <nicolas@demosdebs.org>
Applied-Upstream: no
Last-Update: 2020-04-29
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/Makefile
+++ b/Makefile
@@ -3,7 +3,7 @@
 CC	:= gcc
 PKG_CONFIG:=pkg-config
 
-CFLAGS	+= -Wall -pipe -I/usr/include $(shell $(PKG_CONFIG) sdl vorbisfile --cflags)
+CFLAGS	+= -Wall -pipe -I/usr/include $(shell $(PKG_CONFIG) sdl2 vorbisfile --cflags)
 CFLAGS2	+= -fpeephole2 -fexpensive-optimizations
 LDFLAGS +=
 
@@ -27,10 +27,10 @@
 	-@$(RM_F) $(TARGET)
 
 main: attract.o convolve.o filter.o input.o interpolate.o im.o list.o main.o pnm.o script.o util.o xmalloc.o tuherrus.o suodatin.o
-	$(CC) -o $(TARGET) $^ $(LDFLAGS) $(shell $(PKG_CONFIG) sdl vorbisfile --libs ) -lm
+	$(CC) -o $(TARGET) $^ $(LDFLAGS) $(shell $(PKG_CONFIG) sdl2 vorbisfile --libs ) -lm
 
 editor: convolve.o editor.o filter.o input.o interpolate.o im.o list.o pnm.o script.o util.o xmalloc.o
-	$(CC) -o $@ $^ $(LDFLAGS) $(shell $(PKG_CONFIG) sdl --libs)
+	$(CC) -o $@ $^ $(LDFLAGS) $(shell $(PKG_CONFIG) sdl2 --libs)
 
 script-buildbg: script-buildbg.c
 	$(CC) $(CFLAGS) -o $@ $^ -lm
--- a/editor.c
+++ b/editor.c
@@ -1,6 +1,6 @@
 /* editor.c */
 
-#include <SDL.h>
+#include <SDL2/SDL.h>
 #include <math.h>
 #include "main.h"
 #include "script.h"
--- a/input.c
+++ b/input.c
@@ -1,6 +1,6 @@
 /* input.c - human input for syncing etc */
 
-#include <SDL/SDL.h>
+#include <SDL2/SDL.h>
 #include "input.h"
 #include "interpolate.h"
 
--- a/main.c
+++ b/main.c
@@ -1,6 +1,6 @@
 /* main.c */
 
-#include <SDL/SDL.h>
+#include <SDL2/SDL.h>
 #include <vorbis/vorbisfile.h>
 #include <unistd.h>
 #include <math.h>
@@ -50,12 +50,12 @@
 	int i;
 
 	/* parse command line arguments */
-	flags=SDL_HWSURFACE|SDL_HWPALETTE;
+	flags=0;
 	renderonly=0;
 
 	for (i=1; i<argc; i++)
 	{
-		if (!strcmp("-fullscreen",argv[i])) flags|=SDL_FULLSCREEN;
+		if (!strcmp("-fullscreen",argv[i])) flags|=SDL_WINDOW_FULLSCREEN;
 		else if (!strcmp("-render",argv[i])) renderonly=1;
 		else script_path = argv[i];
 	}
@@ -118,13 +118,15 @@
 		return 1;
 	}
 
-	if ((surface=SDL_SetVideoMode(SCREEN_WIDTH, SCREEN_HEIGHT, 24, flags)) == NULL)
-	{
-		SDL_Quit();
-		return 1;
-	}
-
-	SDL_WM_SetCaption("Fractures and Rust by atomimaitokahvi",NULL);
+	SDL_Window *sdlWindow;
+	SDL_Renderer *sdlRenderer;
+	SDL_Texture *sdlTexture;
+	SDL_Surface* sdlSurface;
+	sdlWindow = SDL_CreateWindow("Fractures and Rust by atomimaitokahvi",SDL_WINDOWPOS_CENTERED,SDL_WINDOWPOS_CENTERED,SCREEN_WIDTH,SCREEN_HEIGHT,flags);
+	sdlRenderer = SDL_CreateRenderer(sdlWindow, -1, 0);
+	sdlSurface = SDL_CreateRGBSurfaceWithFormat(0, SCREEN_WIDTH, SCREEN_HEIGHT, 32,SDL_PIXELFORMAT_RGBA32);
+	surface = SDL_CreateRGBSurfaceWithFormat(0, SCREEN_WIDTH, SCREEN_HEIGHT, 24,SDL_PIXELFORMAT_RGB24); //buffer video
+	sdlTexture = SDL_CreateTextureFromSurface(sdlRenderer,surface); // on crÃ©e une texture a partir du buffer video
 
 	spec.freq = 44100;
 	spec.format = AUDIO_S16LSB;
@@ -175,7 +177,13 @@
 		render(surface);
 		if (renderonly) write_pnm(surface->pixels);
 		SDL_UnlockSurface(surface);
-		if (!renderonly) SDL_Flip(surface);
+		if (!renderonly) {
+			sdlSurface = SDL_ConvertSurface(surface,sdlSurface->format,0);
+			SDL_UpdateTexture(sdlTexture, NULL, sdlSurface->pixels, sdlSurface->pitch);
+			SDL_RenderClear(sdlRenderer);
+			SDL_RenderCopy(sdlRenderer, sdlTexture, NULL, NULL);
+			SDL_RenderPresent(sdlRenderer);
+		}
 
 		/* check for program termination */
 		while (SDL_PollEvent(&event))
@@ -190,6 +198,11 @@
 	}
 
 terminate:
+	SDL_FreeSurface(surface);
+	SDL_FreeSurface(sdlSurface);
+	SDL_DestroyTexture(sdlTexture);
+	SDL_DestroyRenderer(sdlRenderer);
+	SDL_DestroyWindow(sdlWindow);
 	SDL_Quit();
 	input_save(stdout, "brightness");
 	fprintf(stderr, "%d\n",script_advance(0));
