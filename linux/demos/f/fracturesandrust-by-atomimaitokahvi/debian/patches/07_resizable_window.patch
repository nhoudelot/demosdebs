Description: make window resizable
 make window resizable with correct ratio
Author: Nicolas HOUDELOT <nicolas@demosdebs.org>
Applied-Upstream: no
Last-Update: 2020-04-29
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/main.c
+++ b/main.c
@@ -22,6 +22,7 @@
 void shutdown(void);
 void kyrpele(im_t *);
 void nothing(im_t *);
+void resize_window(SDL_Renderer *sdlRenderer,int w, int h);
 
 /* data and variables */
 extern im_t *pics[SCRIPT_MAX_PICS];
@@ -36,6 +37,9 @@
 int audiolen,audiooff;
 int renderonly;
 
+#define DEMO_XASPECT 4.0f
+#define DEMO_YASPECT 3.0f
+
 
 int
 main(int argc, char *argv[])
@@ -50,7 +54,7 @@
 	int i;
 
 	/* parse command line arguments */
-	flags=0;
+	flags=SDL_WINDOW_RESIZABLE;
 	renderonly=0;
 
 	for (i=1; i<argc; i++)
@@ -125,6 +129,7 @@
 	sdlRenderer = SDL_CreateRenderer(sdlWindow, -1, SDL_RENDERER_PRESENTVSYNC);
 	surface = SDL_CreateRGBSurfaceWithFormat(0, SCREEN_WIDTH, SCREEN_HEIGHT, 24,SDL_PIXELFORMAT_RGB24); //buffer video
 	sdlTexture = SDL_CreateTextureFromSurface(sdlRenderer,surface); // on crÃ©e une texture a partir du buffer video
+	SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "1");
 
 	spec.freq = 44100;
 	spec.format = AUDIO_S16LSB;
@@ -149,6 +154,8 @@
 
 	script_advance(metaframes);
 
+	Uint32 windowID = SDL_GetWindowID(sdlWindow);
+
 	while (1)
 	{
 		/* update metaframe counter (100hz) */
@@ -196,6 +203,11 @@
 					case SDLK_q: goto terminate; break;
 				}
 			}
+			if (event.window.windowID == windowID)  {
+				if (event.window.event == SDL_WINDOWEVENT_RESIZED)  {
+					resize_window(sdlRenderer,event.window.data1,event.window.data2);
+				}
+			}
 		}
 
 		if (!renderonly)
@@ -215,6 +227,28 @@
 }
 
 void
+resize_window(SDL_Renderer *sdlRenderer, int w, int h) {
+    SDL_Rect newWindowSize;
+    newWindowSize.x = 0;
+    newWindowSize.y = 0;
+
+    float aspect = (float)w / (float)h;
+    if (aspect > DEMO_XASPECT / DEMO_YASPECT) {
+        newWindowSize.w = (int)((float)h * DEMO_XASPECT / DEMO_YASPECT);
+        newWindowSize.x = (w - newWindowSize.w) / 2;
+        newWindowSize.h = h;
+    } else {
+        newWindowSize.h = (int)((float)w * DEMO_YASPECT / DEMO_XASPECT);
+        newWindowSize.y = (h - newWindowSize.h) / 2;
+        newWindowSize.w = w;
+    }
+
+    SDL_Rect viewPort;
+    SDL_RenderGetViewport(sdlRenderer, &viewPort);
+    SDL_RenderSetViewport(sdlRenderer, &newWindowSize);
+}
+
+void
 write_pnm(Uint8 *pixels)
 {
 	static int n=0;
