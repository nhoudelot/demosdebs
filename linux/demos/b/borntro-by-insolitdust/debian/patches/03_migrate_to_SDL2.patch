--- a/Makefile
+++ b/Makefile
@@ -28,7 +28,7 @@
 
  $(TARGET): main.cc xmodelib.cc texturelib.cpp idscroller.cc timerlib.cpp
 	@echo Compiling Insolit Dust BoRnTrO
-	g++ -o  $(TARGET) $(CXXFLAGS) main.cc xmodelib.cc texturelib.cpp idscroller.cc timerlib.cpp $(shell pkgconf sdl SDL_mixer --libs)
+	g++ -o  $(TARGET) $(CXXFLAGS) main.cc xmodelib.cc texturelib.cpp idscroller.cc timerlib.cpp $(shell pkgconf sdl2 SDL2_mixer --libs)
 
 	@echo Build finished. Run ./borntro
 
--- a/main.cc
+++ b/main.cc
@@ -1,5 +1,5 @@
-#include <SDL/SDL.h>
-#include <SDL/SDL_mixer.h>
+#include <SDL2/SDL.h>
+#include <SDL2/SDL_mixer.h>
 #include <math.h>
 #include <unistd.h>
 
@@ -30,8 +30,6 @@
 	Video = new VgaXMode(FULLSCREEN);
 	DBuf = Video->GetVideoMem();
 
-	SDL_WM_SetCaption("InsolitDust BoRnTrO 2012", "borntro");
-
 	Font = new IDScroller("/usr/share/borntro-by-insolitdust/ID_Font_002_32x31.pcx", Video, 32, 31);
 
 	Font->YPosScroller = 208;
--- a/xmodelib.cc
+++ b/xmodelib.cc
@@ -40,47 +40,36 @@
 
 VgaXMode::VgaXMode(char FullScreen)
 {
-	SDL_VideoInfo vinfo;
 	Uint32 vmodeflags = 0;
 	int i;
 
-	//Set the best resolution mode possible
-
-	vmodeflags = SDL_DOUBLEBUF;
-
-	vinfo = *SDL_GetVideoInfo();
-
-	if (vinfo.hw_available == 0)
-		vmodeflags |= SDL_SWSURFACE;
-	else
-	if (vinfo.blit_sw == 0)
-		vmodeflags |= SDL_HWSURFACE;
-	else
-		vmodeflags |= SDL_SWSURFACE;
-
 	//Enable fullscreen mode if is required
 
 	if (FullScreen)
 	{
-		vmodeflags |= SDL_FULLSCREEN;
+		vmodeflags |= SDL_WINDOW_FULLSCREEN;
 
 		SDL_ShowCursor(0);
 	}
 
 	//Create the 640x480x256 main "window"
+	sdlWindow = SDL_CreateWindow("InsolitDust BoRnTrO 2012",SDL_WINDOWPOS_CENTERED,SDL_WINDOWPOS_CENTERED,640,480,vmodeflags);
+	sdlRenderer = SDL_CreateRenderer(sdlWindow, -1, SDL_RENDERER_TARGETTEXTURE);
 
-	Video_Surface = SDL_SetVideoMode(640, 480, 8, vmodeflags);
-
+	Video_Surface = SDL_CreateRGBSurfaceWithFormat(0, 320, 240, 8,SDL_PIXELFORMAT_RGB332);
 	if (Video_Surface == NULL)
 		exit(-1);
 
 	//Create the 320x240x256 emulated video mode
 
-	Video_Memory = SDL_CreateRGBSurface(vmodeflags, 320, 240, 8, 0, 0, 0, 0);
+	//Video_Memory = SDL_CreateRGBSurface(vmodeflags, 320, 240, 8, 0, 0, 0, 0);
+	Video_Memory =SDL_CreateRGBSurfaceWithFormat(0, 320, 240, 8,SDL_PIXELFORMAT_INDEX8);
 
 	if (Video_Memory == NULL)
 		exit(-1);
 
+	sdlTexture = SDL_CreateTextureFromSurface(sdlRenderer,Video_Surface); // texture with format from video buffer
+
 	//Build then Y offset table for speed up video memory read/write
 
 	PixTab = (unsigned int *)malloc(sizeof(unsigned int) * 240);
@@ -108,16 +97,19 @@
 void VgaXMode::Update()
 {
 	//Stretch emulated 320x240 surface in main 640x480 window
-
-	SDL_Rect srcrect = {0, 0, 320, 240};
-	SDL_Rect dstrect = {0, 0, 640, 480};
-
-	SDL_SoftStretch(Video_Memory, &srcrect, Video_Surface, &dstrect);
+//	SDL_Rect srcrect = {0, 0, 320, 240};
+//	SDL_Rect dstrect = {0, 0, 640, 480};
 
 	if (SDL_MUSTLOCK(Video_Surface))
 		SDL_UnlockSurface(Video_Surface);
 	else
-		SDL_UpdateRect(Video_Surface, 0, 0, 0, 0);
+
+		//SDL_BlitScaled(Video_Memory, &srcrect, Video_Surface, &dstrect);
+		Video_Surface = SDL_ConvertSurface(Video_Memory,Video_Surface->format,0);
+		SDL_UpdateTexture(sdlTexture, 0, Video_Surface->pixels, Video_Surface->pitch);
+		SDL_RenderClear(sdlRenderer);
+		SDL_RenderCopy(sdlRenderer, sdlTexture, NULL, NULL);
+		SDL_RenderPresent(sdlRenderer);
 }
 
 void VgaXMode::PutPixel(int x, int y, unsigned char col)
@@ -228,7 +220,13 @@
 {
 	//Enabled palette
 
-	SDL_SetColors(Video_Surface, Palette, 0, 256);
+	SDL_SetPaletteColors(Video_Surface->format->palette, Palette, 0, 256);
+	SDL_BlitSurface(Video_Memory, NULL, Video_Surface, NULL);
+
+	SDL_UpdateTexture(sdlTexture, NULL, Video_Surface->pixels, Video_Surface->pitch);
+	SDL_RenderClear(sdlRenderer);
+	SDL_RenderCopy(sdlRenderer, sdlTexture, NULL, NULL);
+	SDL_RenderPresent(sdlRenderer);
 }
 
 SDL_Color *VgaXMode::GetPalette(void)
@@ -402,7 +400,7 @@
 		return 1;
 	}
 
-	SDL_SetColors(Video_Surface, FadePalette, 0, 256);
+	SDL_SetPaletteColors(Video_Surface->format->palette, FadePalette, 0, 256);
 
 	return 0;
 }
@@ -465,7 +463,7 @@
 		return 1;
 	}
 
-	SDL_SetColors(Video_Surface, Palette, 0, 256);
+	SDL_SetPaletteColors(Video_Surface->format->palette, Palette, 0, 256);
 
 	return 0;
 }
@@ -473,4 +471,4 @@
 void VgaXMode::ResetFade(void)
 {
 	NewFade = 0;
-}
\ No newline at end of file
+}
--- a/xmodelib.h
+++ b/xmodelib.h
@@ -31,7 +31,7 @@
 #ifndef XMODELIB_H
 #define XMODELIB_H
 
-#include <SDL/SDL.h>
+#include <SDL2/SDL.h>
 
 class VgaXMode
 {
@@ -45,6 +45,11 @@
 char NewFade;                               //Uset to reset new fade effect
 
 public:
+
+SDL_Window *sdlWindow;
+SDL_Renderer *sdlRenderer;
+SDL_Texture *sdlTexture;
+
 VgaXMode(char FullScreen);                                      //Constructor, FullScreen = 1 to go in fullscreen mode
 ~VgaXMode();                                                            //Destructor
 
