--- a/sunvox_engine/psynth/psynth.h
+++ b/sunvox_engine/psynth/psynth.h
@@ -7,6 +7,7 @@
 #include "core/core.h"
 #include "memory/memory.h"
 #include "time/timemanager.h"
+#include <cmath>
 #ifdef SUNVOX_GUI
 #include "window_manager/wmanager.h"
 #endif
@@ -88,77 +89,77 @@
 
 struct psynth_control
 {
-    const UTF8_CHAR	*ctl_name;  //For example: "Delay", "Feedback"
-    const UTF8_CHAR    	*ctl_label; //For example: "dB", "samples"
-    CTYPE	    	ctl_min;
-    CTYPE	    	ctl_max;
-    CTYPE	    	ctl_def;
-    CTYPE	    	*ctl_val;
-    int		    	type;
-};
-
-//One item of the sound net:
-#define PSYNTH_FLAG_EXISTS		( 1 << 0 )
-#define PSYNTH_FLAG_OUTPUT		( 1 << 1 )
-#define PSYNTH_FLAG_GENERATOR		( 1 << 3 )
-#define PSYNTH_FLAG_EFFECT		( 1 << 4 )
-#define PSYNTH_FLAG_RENDERED		( 1 << 5 )
-#define PSYNTH_FLAG_INITIALIZED		( 1 << 6 )
-#define PSYNTH_FLAG_MUTE		( 1 << 7 )
-#define PSYNTH_FLAG_SOLO		( 1 << 8 )
-#define PSYNTH_FLAG_LAST		( 1 << 30 )
-#define PSYNTH_MAX_CHANNELS		8
-#define PSYNTH_MAX_CONTROLLERS		17
-struct psynth_net_item
-{
-    int		    flags;
-
-    UTF8_CHAR	    item_name[ 32 ];
-    int		    name_counter;			    //For generation unique names
-
-    int		    (*synth)(  
-			PSYTEXX_SYNTH_PARAMETERS
-		    );
-    void	    *data_ptr;				    //User data
-    STYPE	    *channels_in[ PSYNTH_MAX_CHANNELS ];
-    STYPE	    *channels_out[ PSYNTH_MAX_CHANNELS ];
-    int		    in_empty[ PSYNTH_MAX_CHANNELS ];	    //Number of NULL bytes
-    int		    out_empty[ PSYNTH_MAX_CHANNELS ];	    //Number of NULL bytes
-
-    int		    x, y;   //In percents (0..1024)
-    int		    instr_num;
-
-#ifdef HIRES_TIMER
-    int             cpu_usage; //In percents (0..100)
-    int             cpu_usage_ticks;
-    int             cpu_usage_samples;
-#endif
-
-    //Standart properties:
-    int		    finetune;	//-256...256
-    int		    relative_note;
-
-    //Number of channels:
-    int		    input_channels;
-    int		    output_channels;
-
-    //Links to an input synths:
-    int		    *input_links;
-    int		    input_num;
-
-    //Controllers:
-    psynth_control  ctls[ PSYNTH_MAX_CONTROLLERS ];
-    int		    ctls_num;
-
-#ifdef SUNVOX_GUI
-    //Visual (optional)
-    WINDOWPTR	    visual;
-#endif
-
-    //Data chunks:
-    char	    **chunks;
-    int		    *chunk_flags;
-};
+    const UTF8_CHAR	*ctl_name;  //For example: "Delay", "Feedback"
+    const UTF8_CHAR    	*ctl_label; //For example: "dB", "samples"
+    CTYPE	    	ctl_min;
+    CTYPE	    	ctl_max;
+    CTYPE	    	ctl_def;
+    CTYPE	    	*ctl_val;
+    int		    	type;
+};
+
+//One item of the sound net:
+#define PSYNTH_FLAG_EXISTS		( 1 << 0 )
+#define PSYNTH_FLAG_OUTPUT		( 1 << 1 )
+#define PSYNTH_FLAG_GENERATOR		( 1 << 3 )
+#define PSYNTH_FLAG_EFFECT		( 1 << 4 )
+#define PSYNTH_FLAG_RENDERED		( 1 << 5 )
+#define PSYNTH_FLAG_INITIALIZED		( 1 << 6 )
+#define PSYNTH_FLAG_MUTE		( 1 << 7 )
+#define PSYNTH_FLAG_SOLO		( 1 << 8 )
+#define PSYNTH_FLAG_LAST		( 1 << 30 )
+#define PSYNTH_MAX_CHANNELS		8
+#define PSYNTH_MAX_CONTROLLERS		17
+struct psynth_net_item
+{
+    int		    flags;
+
+    UTF8_CHAR	    item_name[ 32 ];
+    int		    name_counter;			    //For generation unique names
+
+    int		    (*synth)(  
+			PSYTEXX_SYNTH_PARAMETERS
+		    );
+    void	    *data_ptr;				    //User data
+    STYPE	    *channels_in[ PSYNTH_MAX_CHANNELS ];
+    STYPE	    *channels_out[ PSYNTH_MAX_CHANNELS ];
+    int		    in_empty[ PSYNTH_MAX_CHANNELS ];	    //Number of NULL bytes
+    int		    out_empty[ PSYNTH_MAX_CHANNELS ];	    //Number of NULL bytes
+
+    int		    x, y;   //In percents (0..1024)
+    int		    instr_num;
+
+#ifdef HIRES_TIMER
+    int             cpu_usage; //In percents (0..100)
+    int             cpu_usage_ticks;
+    int             cpu_usage_samples;
+#endif
+
+    //Standart properties:
+    int		    finetune;	//-256...256
+    int		    relative_note;
+
+    //Number of channels:
+    int		    input_channels;
+    int		    output_channels;
+
+    //Links to an input synths:
+    int		    *input_links;
+    int		    input_num;
+
+    //Controllers:
+    psynth_control  ctls[ PSYNTH_MAX_CONTROLLERS ];
+    int		    ctls_num;
+
+#ifdef SUNVOX_GUI
+    //Visual (optional)
+    WINDOWPTR	    visual;
+#endif
+
+    //Data chunks:
+    char	    **chunks;
+    int		    *chunk_flags;
+};
 
 //Sound net (created by host):
 #define MAX_PERIOD_PTR			30720
@@ -216,27 +217,27 @@
     CTYPE *value,
     void *net );
 
-//Global tables:
-extern ulong g_linear_tab[ 768 ];
-extern uchar g_vibrato_tab[ 256 ];
-
-//Global variables:
-#ifdef SUNVOX_GUI
-extern window_manager *g_wm;
-#endif
-
-//Data chunks. They can be used to storage such data as samples, envelopes.
-//This data will be saved to file with sunvox tune.
-#define PSYNTH_CHUNK_FLAG_SAMPLE_8BIT	    ( 1 << 0 )
-#define PSYNTH_CHUNK_FLAG_SAMPLE_16BIT	    ( 1 << 1 )
-#define PSYNTH_CHUNK_FLAG_SAMPLE_FLOAT	    ( 1 << 2 )
-#define PSYNTH_CHUNK_FLAG_SAMPLE_STEREO	    ( 1 << 3 )
-extern void psynth_new_chunk( int synth_id, int num, int size, int flags, void *net ); //Create new chunk of "size" bytes
-extern void *psynth_get_chunk( int synth_id, int num, void *net ); //Get ptr to selected chunk, or NULL if chunk is not exists
-extern int psynth_get_chunk_info( int synth_id, int num, void *net, ulong *size, int *flags );
-extern void *psynth_resize_chunk( int synth_id, int num, ulong new_size, void *net );
-extern void psynth_clear_chunk( int synth_id, int num, void *net );
-extern void psynth_clear_chunks( int synth_id, void *net ); //Remove all chunks in synth
+//Global tables:
+extern ulong g_linear_tab[ 768 ];
+extern uchar g_vibrato_tab[ 256 ];
+
+//Global variables:
+#ifdef SUNVOX_GUI
+extern window_manager *g_wm;
+#endif
+
+//Data chunks. They can be used to storage such data as samples, envelopes.
+//This data will be saved to file with sunvox tune.
+#define PSYNTH_CHUNK_FLAG_SAMPLE_8BIT	    ( 1 << 0 )
+#define PSYNTH_CHUNK_FLAG_SAMPLE_16BIT	    ( 1 << 1 )
+#define PSYNTH_CHUNK_FLAG_SAMPLE_FLOAT	    ( 1 << 2 )
+#define PSYNTH_CHUNK_FLAG_SAMPLE_STEREO	    ( 1 << 3 )
+extern void psynth_new_chunk( int synth_id, int num, int size, int flags, void *net ); //Create new chunk of "size" bytes
+extern void *psynth_get_chunk( int synth_id, int num, void *net ); //Get ptr to selected chunk, or NULL if chunk is not exists
+extern int psynth_get_chunk_info( int synth_id, int num, void *net, ulong *size, int *flags );
+extern void *psynth_resize_chunk( int synth_id, int num, ulong new_size, void *net );
+extern void psynth_clear_chunk( int synth_id, int num, void *net );
+extern void psynth_clear_chunks( int synth_id, void *net ); //Remove all chunks in synth
 
 //Number of inputs/outputs:
 extern int psynth_get_number_of_outputs( int synth_id, void *net );
