--- a/Makefile
+++ b/Makefile
@@ -3,9 +3,9 @@
 TARGET = thegnusongkaraoke-by-s3k7lunch
 OBJECTS = scriptread.o main.o gfx.o sdl.o font.o
 CC = g++
-CFLAGS += $(shell sdl-config --cflags) -Wall -pipe -std=gnu90
+CFLAGS += $(shell sdl2-config --cflags) -Wall -pipe -std=gnu90 -g
 CXXFLAGS += -Wall -pipe
-LIBS = -L/usr/lib $(shell sdl-config --libs) -lpthread
+LIBS = -L/usr/lib $(shell sdl2-config --libs) -lpthread
 
 INSTALL = install
 INSTALL_DIR     = $(INSTALL) -p -d -o root -g root  -m  755
--- a/sdl.c
+++ b/sdl.c
@@ -7,9 +7,10 @@
  */
 
 #include <stdlib.h>
-#include <SDL/SDL.h>
+#include <SDL2/SDL.h>
 #include "tinyptc.h"
 
+
 #define PTC_ALPHA_MASK 0xFF000000
 #define PTC_RED_MASK   0x00FF0000
 #define PTC_GREEN_MASK 0x0000FF00
@@ -28,6 +29,10 @@
 static int ptc_pitch;
 #endif /* !__PTC_WINDOWED__ */
 
+SDL_Window *sdlWindow;
+SDL_Renderer *sdlRenderer;
+SDL_Texture *sdlTexture;
+
 int
 ptc_open (char *title, int width, int height)
 {
@@ -38,17 +43,21 @@
 #ifdef __PTC_WINDOWED__
 	SDL_WM_SetCaption (title, NULL);
 #endif /* __PTC_WINDOWED__ */
-	ptc_video_surface=SDL_SetVideoMode (width, height,
+
+	sdlWindow = SDL_CreateWindow(title,SDL_WINDOWPOS_CENTERED,SDL_WINDOWPOS_CENTERED,width,height,0);
+	sdlRenderer = SDL_CreateRenderer(sdlWindow, -1, 0);
+	ptc_video_surface=SDL_CreateRGBSurfaceWithFormat (0,width, height,
 #ifdef __PTC_ENABLE_CONVERSIONS__
 	                                    32,
 #else
 	                                    0,
 #endif /* __PTC_ENABLE_CONVERSIONS__ */
-	                                    SDL_HWSURFACE | SDL_DOUBLEBUF
+	                                    SDL_PIXELFORMAT_ABGR32
 	                                    );
 	if (ptc_video_surface == NULL) {
 		return 0;
 	}
+	sdlTexture = SDL_CreateTextureFromSurface(sdlRenderer,ptc_video_surface);
 	SDL_ShowCursor(0);
 	ptc_stored_width=width;
 	ptc_stored_height=height;
@@ -59,7 +68,8 @@
 	if (ptc_buffer==NULL) {
 		return 0;
 	}
-	ptc_buffer_surface=SDL_CreateRGBSurfaceFrom(ptc_buffer, ptc_stored_width, ptc_stored_height, 32, ptc_stored_width*sizeof(int), PTC_RED_MASK, PTC_GREEN_MASK, PTC_BLUE_MASK, PTC_ALPHA_MASK);
+	ptc_buffer_surface=SDL_CreateRGBSurfaceWithFormatFrom(ptc_buffer, ptc_stored_width, ptc_stored_height, 32, ptc_stored_width*sizeof(int),SDL_PIXELFORMAT_ARGB32);
+	//ptc_buffer_surface=SDL_CreateRGBSurfaceFrom(ptc_buffer, ptc_stored_width, ptc_stored_height, 32, ptc_stored_width*sizeof(int), PTC_RED_MASK, PTC_GREEN_MASK, PTC_BLUE_MASK, PTC_ALPHA_MASK);
 #ifndef __PTC_ENABLE_CONVERSIONS__
 	ptc_blit_surface=ptc_buffer_surface;
 #endif /* !__PTC_ENABLE_CONVERSIONS__ */
@@ -77,7 +87,8 @@
 
 	memcpy(ptc_buffer_surface->pixels, buffer, ptc_stored_width*ptc_stored_height*sizeof(int));
 #ifdef __PTC_ENABLE_CONVERSIONS__
-	ptc_blit_surface=SDL_DisplayFormat(ptc_buffer_surface);
+	ptc_blit_surface=SDL_ConvertSurfaceFormat(ptc_buffer_surface,SDL_PIXELFORMAT_ABGR32,0);
+	//ptc_blit_surface=SDL_DisplayFormat(ptc_buffer_surface);
 	if (ptc_blit_surface==NULL) {
 		return 0;
 	}
@@ -88,13 +99,14 @@
 	if (ptc_return_code!=0) {
 		return 0;
 	}
+
 #ifdef __PTC_ENABLE_CONVERSIONS__
 	SDL_FreeSurface(ptc_blit_surface);
 #endif /* __PTC_ENABLE_CONVERSIONS__ */
-	ptc_return_code=SDL_Flip(ptc_video_surface);
-	if (ptc_return_code!=0) {
-		return 0;
-	}
+	SDL_UpdateTexture(sdlTexture, NULL, ptc_blit_surface->pixels, ptc_blit_surface->pitch);
+	SDL_RenderClear(sdlRenderer);
+	SDL_RenderCopy(sdlRenderer, sdlTexture, NULL, NULL);
+	SDL_RenderPresent(sdlRenderer);
 	ptc_process_events();
 	return 1;
 }
@@ -104,20 +116,17 @@
 {
 	char *ptc_keypressed;
 
-	if (SDL_PollEvent (&ptc_sdl_event)) {
-		switch (ptc_sdl_event.type) {
-		case SDL_KEYDOWN: {
-			ptc_keypressed=(char *)SDL_GetKeyState(NULL);
-			if (ptc_keypressed[SDLK_ESCAPE]==SDL_PRESSED) {
-				ptc_close();
-				exit(0);
-			}
-		}; break;
-		case SDL_QUIT: {
-			ptc_close();
-			exit(0);
-		}; break;
+	while(SDL_PollEvent(&ptc_sdl_event))
+	{
+	    if (ptc_sdl_event.type == SDL_QUIT) {
+		ptc_close();exit(0);
+	    }
+	    if (ptc_sdl_event.type == SDL_KEYDOWN) {
+		switch (ptc_sdl_event.key.keysym.sym) {
+		    case SDLK_ESCAPE: ptc_close();exit(0); break;
+		    case SDLK_q:ptc_close();exit(0); break;
 		}
+	    }
 	}
 	return 0;
 }
@@ -128,5 +137,8 @@
 	SDL_ShowCursor(1);
 	SDL_FreeSurface(ptc_buffer_surface);
 	SDL_FreeSurface(ptc_video_surface);
+	SDL_DestroyTexture(sdlTexture);
+	SDL_DestroyRenderer(sdlRenderer);
+	SDL_DestroyWindow(sdlWindow);
 	free(ptc_buffer);
 }
