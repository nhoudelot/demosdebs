Description: add alsa support
Author: Nicolas HOUDELOT <nicolas@demosdebs.org>
Applied-Upstream: no
Last-Update: 2020-05-01
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- /dev/null
+++ b/Sources/linux_alsa.cpp
@@ -0,0 +1,175 @@
+/*
+ * ALSA audio driver, since OSS is pretty much dead at this stage.
+ */
+
+#include "linux_alsa.h"
+#include "mp3.h"
+
+#if DEMOLIB_USE_ALSA
+
+#include <stdio.h>
+#include <string.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <sys/types.h>
+#include <sys/ioctl.h>
+#include <errno.h>
+#include <sys/time.h>
+#include <alsa/pcm.h>
+#include <alsa/asoundlib.h>
+
+#include <algorithm>
+
+#define SAMPLE_RATE 44100
+#define NUM_CHANNELS 2
+#define BYTES_PER_FRAME (sizeof(short) * NUM_CHANNELS)
+
+ALSAAudioDriver::ALSAAudioDriver(MP3AudioProvider *prv) {
+    this->prov = prv;
+
+    snd_pcm_hw_params_t *hw_params;
+    snd_pcm_hw_params_alloca(&hw_params);
+
+    die_on_error("snd_pcm_open()", snd_pcm_open(&this->pcm_handle, "default", SND_PCM_STREAM_PLAYBACK, 0));
+
+    /* Set format. */
+    die_on_error("snd_pcm_hw_params_any()", snd_pcm_hw_params_any(this->pcm_handle, hw_params));
+    die_on_error("snd_pcm_hw_params_set_access()", snd_pcm_hw_params_set_access(this->pcm_handle, hw_params, SND_PCM_ACCESS_RW_INTERLEAVED));
+    die_on_error("snd_pcm_hw_params_set_format()", snd_pcm_hw_params_set_format(this->pcm_handle, hw_params, SND_PCM_FORMAT_S16));
+    die_on_error("snd_pcm_hw_params_set_rate()", snd_pcm_hw_params_set_rate(this->pcm_handle, hw_params, SAMPLE_RATE, 0));
+    die_on_error("snd_pcm_hw_params_set_channels", snd_pcm_hw_params_set_channels(this->pcm_handle, hw_params, NUM_CHANNELS));
+
+    /* Match the OSS driver: Fragment size of 4 kB = 1024 samples.
+     * Ask for 64 periods (a bit over a second).
+     * in 2024 it seems that asking for 32 period is better
+     */
+    unsigned int num_periods = 32;
+    int dir = 0;
+    die_on_error("snd_pcm_hw_params_set_periods_near", snd_pcm_hw_params_set_periods_near(this->pcm_handle, hw_params, &num_periods, &dir));
+    this->period_size = 65536 / num_periods;
+    dir = 0;
+    die_on_error("snd_pcm_hw_params_set_period_size_near", snd_pcm_hw_params_set_period_size_near(this->pcm_handle, hw_params, &this->period_size, &dir));
+    die_on_error("snd_pcm_hw_params", snd_pcm_hw_params(this->pcm_handle, hw_params));
+    //snd_pcm_hw_params_free(hw_params);
+    float jump = 0.0f;
+    this->bytes_written = (int) (jump * SAMPLE_RATE) * BYTES_PER_FRAME;
+    this->eof = false;
+    this->in_outbuf = 0;
+}
+
+ALSAAudioDriver::~ALSAAudioDriver() {
+    snd_pcm_close(this->pcm_handle);
+}
+
+bool ALSAAudioDriver::run() {
+    if (this->eof) {
+        struct timeval now;
+        gettimeofday(&now, NULL);
+
+        float secs =
+                (float) (now.tv_sec - eof_time.tv_sec) +
+                (float) (now.tv_usec - eof_time.tv_usec) * 0.000001f;
+        this->bytes_played += (int) (secs * SAMPLE_RATE * BYTES_PER_FRAME);
+        memcpy(&this->eof_time, &now, sizeof (struct timeval));
+        return true;
+    }
+
+    snd_pcm_sframes_t avail = 0, delay = 0;
+    int err = snd_pcm_avail_delay(this->pcm_handle, &avail, &delay);
+    if (err < 0) {
+        /* Don't die on this, as it is nearly always just an underrun. */
+        fprintf(stderr, "warning: snd_pcm_avail_delay() returned '%s'\n", snd_strerror(err));
+    } else {
+        this->bytes_played = this->bytes_written - delay * BYTES_PER_FRAME;
+    }
+
+    while (avail >= int(this->period_size)) {
+        /* whopee, we can output :-) */
+        if (in_outbuf < 65536) {
+            int ret = this->prov->fill_buf(this->outbuf + in_outbuf, 65536 - in_outbuf);
+            if (ret == 0) {
+                /* switch to software timer */
+                this->eof = true;
+                gettimeofday(&this->eof_time, NULL);
+                return true;
+            }
+            in_outbuf += ret;
+        }
+
+        /* write only whole periods */
+        int periods_to_write = std::min<int>(avail, in_outbuf / BYTES_PER_FRAME) / this->period_size;
+        if (periods_to_write > 0) {
+            int ret = snd_pcm_writei(this->pcm_handle, this->outbuf, periods_to_write * this->period_size);
+            if (ret < 0) {
+                /* Don't die on this, as it is nearly always just an underrun. */
+                fprintf(stderr, "warning: snd_pcm_writei() returned '%s'\n",
+                        snd_strerror(ret));
+            } else {
+                in_outbuf -= ret * BYTES_PER_FRAME;
+                this->bytes_written += ret * BYTES_PER_FRAME;
+
+                memmove(outbuf, outbuf + ret * BYTES_PER_FRAME, in_outbuf);
+            }
+        }
+
+        avail = snd_pcm_avail_update(this->pcm_handle);
+    }
+    return false;
+}
+
+float ALSAAudioDriver::get_time() {
+    return (float) (this->bytes_played) / SAMPLE_RATE / BYTES_PER_FRAME;
+}
+
+void ALSAAudioDriver::die_on_error(const char *func_name, int err) {
+    if (err < 0) {
+        fprintf(stderr, "warning: snd_pcm_open() returned '%s'\n",
+                snd_strerror(err));
+    }
+}
+
+std::vector<ALSAAudioDriver::ALSASoundCard> ALSAAudioDriver::enumerate_sound_cards() {
+    std::vector<ALSASoundCard> ret;
+
+    char **hints;
+    int err = snd_device_name_hint(-1, "pcm", (void ***) &hints);
+    if (err != 0) {
+        return ret;
+    }
+
+    for (char **n = hints; *n != NULL; ++n) {
+        ALSASoundCard sc;
+
+        char *name = snd_device_name_get_hint(*n, "NAME");
+        char *desc = snd_device_name_get_hint(*n, "DESC");
+
+        if (name != NULL && strcmp(name, "null") != 0 && strncmp(name, "dsnoop:", 7) != 0) {
+            char buf[256];
+            if (desc == NULL) {
+                snprintf(buf, sizeof (buf), "ALSA: %s", name);
+            } else {
+                /*
+                 * Remove everything after the first newline;
+                 * the descriptions tend to be a bit verbose.
+                 */
+                char *nl = strchr(desc, '\n');
+                if (nl != NULL) {
+                    *nl = '\0';
+                }
+
+                snprintf(buf, sizeof (buf), "ALSA: %s (%s)", desc, name);
+            }
+            sc.device = name;
+            sc.description = buf;
+            ret.push_back(sc);
+        }
+
+        free(name);
+        free(desc);
+    }
+
+    snd_device_name_free_hint((void **) hints);
+    return ret;
+}
+
+#endif  /* DEMOLIB_USE_ALSA */
--- a/Sources/main.cpp
+++ b/Sources/main.cpp
@@ -15,7 +15,11 @@
 U32					TickNum = 0			;	// var pour calcul de Fps ( voar utils.h )
 float				m_fps =0.0f			;	// var pour calcul de Fps ( voar utils.h )
 MP3AudioProvider *prov;
-OSSAudioDriver *mp3;
+#if DEMOLIB_USE_ALSA
+    ALSAAudioDriver *mp3;
+#else
+    OSSAudioDriver *mp3;
+#endif
 
 bool	m_Fullscreen = TRUE	;
 U32	m_Resx = 640			;
@@ -135,7 +139,11 @@
 	//-------------------------- Ini MP3 Manager
 #ifndef NOMP3
 	prov = new MP3AudioProvider(MP3_PATH);
-	mp3 = new OSSAudioDriver(prov);
+    #if DEMOLIB_USE_ALSA
+        mp3 =  new ALSAAudioDriver(prov);
+    #else
+        mp3 = new OSSAudioDriver(prov);
+    #endif
 #endif
 
 
--- a/Include/Vip2Headers.h
+++ b/Include/Vip2Headers.h
@@ -18,6 +18,7 @@
 
 #include "mp3.h"
 #include "linux_oss.h"
+#include "linux_alsa.h"
 #include "Utils.h"
 #include "Scheduler.h"
 #include "Synchronisater.h"
@@ -113,7 +114,12 @@
 
 extern Udouble			LaunchTime	;	// le temps ou la demo a démarré
 extern USynchronisater*	AllSynchro	;	// toute les synchros de la demo
-extern OSSAudioDriver *mp3;
+#if DEMOLIB_USE_ALSA
+    extern ALSAAudioDriver *mp3;
+#else
+    extern OSSAudioDriver *mp3;
+#endif
+
 
 //-------- Interface
 #include <math.h>
--- /dev/null
+++ b/Include/audio.h
@@ -0,0 +1,38 @@
+/*
+ * Some general abstract base classes. The AudioDriver gets input from the
+ * AudioProvider and plays it.
+ */
+#ifndef _AUDIO_H
+#define _AUDIO_H 1
+
+class AudioProvider {
+public:
+
+    virtual ~AudioProvider() {
+    };
+
+    virtual int fill_buf(char *buf, int bytes) = 0;
+
+protected:
+
+    AudioProvider() {
+    };
+};
+
+class AudioDriver {
+public:
+
+    virtual ~AudioDriver() {
+    };
+
+    virtual bool run() = 0;
+    virtual float get_time() = 0;
+
+protected:
+
+    AudioDriver() {
+    };
+    AudioProvider *prov;
+};
+
+#endif /* !defined(_AUDIO_H) */
--- /dev/null
+++ b/Include/linux_alsa.h
@@ -0,0 +1,57 @@
+#ifndef _LINUX_ALSA_H
+#define _LINUX_ALSA_H 1
+
+#include "audio.h"
+
+#include "mp3.h"
+
+#include <time.h>
+#include <sys/time.h>
+#include <alsa/asoundlib.h>
+
+#include <string>
+#include <vector>
+
+/*
+ * We depend on snd_pcm_avail_delay() and others, 1.0.18 at the earliest
+ * (which came out around 2008!). In particular, OSS4's ALSA emulation is
+ * way too old.
+ */
+
+#define DEMOLIB_USE_ALSA (SND_LIB_VERSION > 0x10012)
+
+#if DEMOLIB_USE_ALSA
+
+class ALSAAudioDriver {
+public:
+    ALSAAudioDriver(MP3AudioProvider *prv);
+    ~ALSAAudioDriver();
+
+    bool run();
+    float get_time();
+
+    struct ALSASoundCard {
+        std::string device;
+        std::string description;
+    };
+    static std::vector<ALSASoundCard> enumerate_sound_cards();
+
+protected:
+    snd_pcm_t *pcm_handle;
+    struct timeval eof_time;
+
+    char outbuf[65536];
+    unsigned int in_outbuf;
+
+    snd_pcm_uframes_t period_size;
+    int bytes_written, bytes_played;
+    bool eof;
+
+private:
+    void die_on_error(const char *func_name, int err);
+    MP3AudioProvider *prov;
+};
+
+#endif /* DEMOLIB_USE_ALSA */
+
+#endif /* !defined(_LINUX_ALSA_H) */
--- a/Makefile
+++ b/Makefile
@@ -26,7 +26,7 @@
 	Sources/Synchronisater.o Sources/utils.o		  \
 	Sources/XGrezilles.o Sources/linuxcompat.o		  \
 	Sources/main.o Sources/glwindow.o Sources/mp3.o		  \
-	Sources/linux_oss.o
+	Sources/linux_oss.o Sources/linux_alsa.o
 U3DOBJS=LIBS/u3dLib/sources/2Dstuff.o LIBS/u3dLib/sources/Bitmap.o  \
 	LIBS/u3dLib/sources/Boundings.o LIBS/u3dLib/sources/Bsp.o   \
 	LIBS/u3dLib/sources/BSpline.o LIBS/u3dLib/sources/BTree.o   \
@@ -64,9 +64,9 @@
 AR    := ar
 RANLIB := ranlib
 PKG_CONFIG:=pkg-config
-CFLAGS   += -Wall -ffast-math -std=gnu90 -pipe $(shell $(PKG_CONFIG) glu x11 xxf86vm libjpeg --cflags)
-CXXFLAGS += -Wall -ffast-math -std=gnu++98  -fabi-version=2 -pipe $(shell $(PKG_CONFIG) glu x11 xxf86vm libjpeg --cflags)
-LDFLAGS  += $(shell $(PKG_CONFIG) glu x11 xxf86vm libjpeg --libs)
+CFLAGS   += -Wall -ffast-math -std=gnu90 -pipe $(shell $(PKG_CONFIG) glu x11 alsa xxf86vm libjpeg --cflags)
+CXXFLAGS += -Wall -ffast-math -std=gnu++98  -fabi-version=2 -pipe $(shell $(PKG_CONFIG) glu x11 alsa xxf86vm libjpeg --cflags)
+LDFLAGS  += $(shell $(PKG_CONFIG) glu x11 alsa xxf86vm libjpeg --libs)
 RM_F = rm -f
 INSTALL = install
 INSTALL_DIR     = $(INSTALL) -p -d -m  755
