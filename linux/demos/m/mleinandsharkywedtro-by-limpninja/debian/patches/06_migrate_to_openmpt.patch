Description: migrate to openmpt
Author: Nicolas HOUDELOT <nicolas@demosdebs.org>
Applied-Upstream: no
Last-Update: 2024-04-21
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/SConstruct
+++ b/SConstruct
@@ -19,7 +19,7 @@
     incpath = ["/usr/include/fmodex/","/usr/include/freetype2","/usr/include/GraphicsMagick/"]
     libs += ["GraphicsMagick++",'GLU','GL' ]
 
-env = Environment( ENV = os.environ, CXXFLAGS=["-O3","-g3","-flto","-pipe","-std=gnu++11","-fabi-version=8"], LINKFLAGS=["-O3","-g3","-flto"], CPPPATH=["CGLA/"]+incpath )
+env = Environment( ENV = os.environ, CXXFLAGS=["-O3","-g3","-flto","-pipe","-std=c++17","-fabi-version=8"], LINKFLAGS=["-O3","-g3","-flto"], CPPPATH=["CGLA/"]+incpath )
 if crosscompile:
     env['CXX'] = 'i586-mingw32msvc-g++'
 
@@ -27,7 +27,7 @@
 
 cgla = env.Library("cgla", glob("CGLA/*.cpp") )
 
-libs += ["fmodex","ftgl"]
+libs += ["libopenmpt","ftgl","SDL2"]
 libs += ["glut",cgla]
 
 env.Program("mleinandsharkywedtro-by-limpninja",["view.cpp","plant.cpp","texture.cpp","sound.cpp","util.cpp","perlin.cpp","backdrop.cpp","fontrenderer.cpp","capture.cpp","textoverlay.cpp"],LIBS=libs, LIBPATH=libpath )
--- a/sound.cpp
+++ b/sound.cpp
@@ -1,72 +1,64 @@
 #include "sound.h"
 
-
-#include "fmod.hpp"
-#include "fmod_errors.h"
 using namespace std;
 #include <cstdlib>
 #include <stdio.h>
 
-void ERRCHECK(FMOD_RESULT result)
-{
-	if (result != FMOD_OK)
-	{
-		printf("FMOD error! (%d) %s\n", result, FMOD_ErrorString(result));
-		exit(-1);
-	}
-}
 
 void SoundSystem::init()
 {
-	int key;
-	unsigned int version;
-
-	/*
-	   Create a System object and initialize.
-	 */
-	result = FMOD::System_Create(&system);
-	ERRCHECK(result);
-
-	result = system->getVersion(&version);
-	ERRCHECK(result);
-
-	if (version < FMOD_VERSION)
-	{
-		printf("Error!  You are using an old version of FMOD %08x.  This program requires %08x\n", version, FMOD_VERSION);
-		exit(2);
-	}
-
-	result = system->init(1, FMOD_INIT_NORMAL, 0);
-	ERRCHECK(result);
+	 /* Initialisation of SDL */
+    if (SDL_Init(SDL_INIT_AUDIO) < 0) {
+            std::cout << "SDL_INIT_AUDIO fail" << std::endl;
+            result=false;
+    }
+    SDL_zero(spec);
+    spec.freq = 48000;
+    spec.format = AUDIO_F32SYS;
+    spec.channels = 2;
+    spec.samples = 4096;
+    spec.callback = nullptr;
+
+    device = SDL_OpenAudioDevice(nullptr, 0, &spec, nullptr, 0);
+    if (device == 0) {
+        std::cout << "SDL device not found " << std::endl;
+        result=false;
+    }
 }
 
 void SoundSystem::load( std::string fn )
 {
-	result = system->createSound(fn.c_str(), FMOD_SOFTWARE | FMOD_2D | FMOD_CREATESTREAM, 0, &sound);
-	ERRCHECK(result);
-
-
-
+	/* Loading Module */
+    std::ifstream file(fn, std::ios::binary );
+    if (!file.is_open()) {
+        std::cout << "couldn't find music" << std::endl;
+        result=false;
+    }
+    mod = new openmpt::module(file);
 }
 
 void SoundSystem::play()
 {
-	result = system->playSound(FMOD_CHANNEL_FREE, sound, false, &channel);
-	ERRCHECK(result);
+	const int numChannels = 2; // Stereo
+    const int bufferSize = 4096; // Number of frames per channel
+    float* audioBuffer = new float[bufferSize * numChannels];
+
+    mod->set_position_seconds(0); // Ensure song starts from the beginning
+    mod->set_repeat_count(0); // Set repeat count to 0 for playing once
+
+    int framesRead;
+    do {
+        framesRead = mod->read_interleaved_stereo(48000, bufferSize, audioBuffer);
+        if (framesRead > 0) {
+            SDL_QueueAudio(device, audioBuffer, framesRead * numChannels * sizeof(float));
+        }
+    } while (framesRead > 0);
+    SDL_PauseAudioDevice(device, 0);
 }
 
 // return false if done playing
 bool SoundSystem::update()
 {
 	bool playing=false;
-	system->update();
-	if (channel)
-	{
-		channel->isPlaying(&playing);
-
-		result = channel->getSpectrum(spectrum, SPECTRUMSIZE, 0, FMOD_DSP_FFT_WINDOW_TRIANGLE);
-		ERRCHECK(result);
-
-	}
 	return !playing;
 }
--- a/sound.h
+++ b/sound.h
@@ -2,7 +2,9 @@
 #define _SOUND_H
 
 #include <string>
-#include "fmod.hpp"
+#include <fstream>
+#include <libopenmpt/libopenmpt.hpp>
+#include <SDL2/SDL.h>
 
 class SoundSystem
 {
@@ -10,13 +12,13 @@
 static const int SPECTRUMSIZE = 512;
 float spectrum[SPECTRUMSIZE];
 
-
+openmpt::module *mod = nullptr;
+SDL_AudioSpec spec;
+SDL_AudioDeviceID device;
+bool result=true;
 
 SoundSystem()
 {
-	channel = 0;
-	system = 0;
-	sound = 0;
 	init();
 }
 
@@ -26,10 +28,7 @@
 bool update();
 
 private:
-FMOD::System     *system;
-FMOD::Sound      *sound;
-FMOD::Channel    *channel;
-FMOD_RESULT result;
+
 
 };
 
--- a/perlin.h
+++ b/perlin.h
@@ -1,5 +1,5 @@
-#define B 0x100
-#define BM 0xff
+constexpr int B = 0x100;
+constexpr int BM = 0xff;
 #define __myN 0x1000
 #define NP 12   /* 2^N */
 #define NM 0xfff
