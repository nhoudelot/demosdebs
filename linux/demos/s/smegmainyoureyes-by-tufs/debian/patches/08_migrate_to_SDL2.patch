Description: migrate to SDL2
 Migrate from SDL1.2 to SDL2
Author: Nicolas HOUDELOT <nicolas@demosdebs.org>
Applied-Upstream: no
Last-Update: 2024-05-08
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/src/SDLWindow.cpp
+++ b/src/SDLWindow.cpp
@@ -12,17 +12,17 @@
 	SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);
 	SDL_GL_SetAttribute( SDL_GL_DEPTH_SIZE, bpp);
 
-	screen = SDL_SetVideoMode(resolutionX, resolutionY, bpp, SDL_OPENGL);
+	screen = SDL_CreateWindow(caption,SDL_WINDOWPOS_CENTERED,SDL_WINDOWPOS_CENTERED,resolutionX,resolutionY,SDL_WINDOW_OPENGL);
+	SDL_GLContext sdlGlcontext = SDL_GL_CreateContext(screen);
 
 	if (!screen)
 		cerr << "Couldn't set video mode: " << SDL_GetError() << endl;
 
-	SDL_WM_SetCaption(caption, "");
 }
 
 SDLWindow::~SDLWindow()
 {
-	SDL_FreeSurface(screen);
+	SDL_DestroyWindow(screen);
 	SDL_Quit();
 }
 
--- a/src/SDLWindow.h
+++ b/src/SDLWindow.h
@@ -1,7 +1,7 @@
 #ifndef SDLWINDOW_H_INCLUDED
 #define SDLWINDOW_H_INCLUDED
 
-#include <SDL/SDL.h>
+#include <SDL2/SDL.h>
 
 class SDLWindow
 {
@@ -11,7 +11,9 @@
 SDLWindow(char *caption, int resolutionX, int resolutionY, int bpp);
 ~SDLWindow();
 
-SDL_Surface *screen;
+SDL_Window *screen;
 };
 
+SDLWindow *mainWin;
+
 #endif
--- a/src/CelScene.cpp
+++ b/src/CelScene.cpp
@@ -1,17 +1,18 @@
 #include <iostream>
-#include <SDL/SDL.h>
+#include <SDL2/SDL.h>
 #include <GL/gl.h>
 #include <GL/glu.h>
 #include <math.h>
 #include "Texture.h"
 #include "CelScene.h"
+#include "SDLWindow.h"
 
 #include "../models/spikeThingie2.h"
 
 using std::cout;
 using std::endl;
 
-CelScene::CelScene(SDL_Surface *sdlsurf)
+CelScene::CelScene(SDL_Window *sdlsurf)
 {
 	surface = sdlsurf;
 
@@ -197,7 +198,7 @@
 		unsetOrtho();
 	}
 
-	SDL_GL_SwapBuffers();
+	SDL_GL_SwapWindow(mainWin->screen);
 }
 
 void CelScene::init()
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -12,7 +12,7 @@
 
 int main(int argc, char *argv[])
 {
-	SDLWindow *mainWin = new SDLWindow("Xenox-demo lm@o", 640, 480, 16);
+	mainWin = new SDLWindow("Xenox-demo lm@o", 640, 480, 16);
 	SDL_ShowCursor(SDL_DISABLE);
 
 	// load all scenes and show a progressbar
--- a/src/FunkyBackground.cpp
+++ b/src/FunkyBackground.cpp
@@ -1,17 +1,18 @@
 #include <iostream>
-#include <SDL/SDL.h>
+#include <SDL2/SDL.h>
 #include <GL/gl.h>
 #include <GL/glu.h>
 #include <math.h>
 #include "Texture.h"
 #include "FunkyBackground.h"
+#include "SDLWindow.h"
 
 /* FunkyBackground::getFunky()-routine is from Dr.Fungi goes Africa by Fit */
 
 using std::cout;
 using std::endl;
 
-FunkyBackground::FunkyBackground(SDL_Surface *sdlsurf)
+FunkyBackground::FunkyBackground(SDL_Window *sdlsurf)
 {
 	surface = sdlsurf;
 
@@ -45,7 +46,7 @@
 	glTranslatef(0.0, 0.0,-2.5);
 	getFunky((float)getTime()/1000.0, 9, 0);
 
-	SDL_GL_SwapBuffers();
+	SDL_GL_SwapWindow(mainWin->screen);
 }
 
 void FunkyBackground::init()
--- a/src/Greetings.cpp
+++ b/src/Greetings.cpp
@@ -1,17 +1,18 @@
 #include <iostream>
-#include <SDL/SDL.h>
+#include <SDL2/SDL.h>
 #include <GL/gl.h>
 #include <GL/glu.h>
 #include <math.h>
 #include "Texture.h"
 #include "Greetings.h"
+#include "SDLWindow.h"
 
 using std::cout;
 using std::endl;
 
 void drawCube(float size);
 
-Greetings::Greetings(SDL_Surface *sdlsurf)
+Greetings::Greetings(SDL_Window *sdlsurf)
 {
 	surface = sdlsurf;
 
@@ -301,7 +302,7 @@
 		unsetOrtho();
 	}
 
-	SDL_GL_SwapBuffers();
+	SDL_GL_SwapWindow(mainWin->screen);
 }
 
 void Greetings::init()
--- a/src/LoaderBar.cpp
+++ b/src/LoaderBar.cpp
@@ -1,14 +1,15 @@
 #include <iostream>
-#include <SDL/SDL.h>
+#include <SDL2/SDL.h>
 #include <GL/gl.h>
 #include <GL/glu.h>
 #include <math.h>
 #include "LoaderBar.h"
+#include "SDLWindow.h"
 
 using std::cout;
 using std::endl;
 
-LoaderBar::LoaderBar(SDL_Surface *sdlsurf)
+LoaderBar::LoaderBar(SDL_Window *sdlsurf)
 {
 	glPushAttrib(GL_ALL_ATTRIB_BITS);
 	surface = sdlsurf;
@@ -25,7 +26,7 @@
 	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
 	glLoadIdentity();
 
-	SDL_GL_SwapBuffers();
+	SDL_GL_SwapWindow(mainWin->screen);
 }
 
 void LoaderBar::render(int percent)
@@ -56,7 +57,7 @@
 	glEnd();
 	unsetOrtho();
 
-	SDL_GL_SwapBuffers();
+	SDL_GL_SwapWindow(mainWin->screen);
 }
 
 void LoaderBar::init()
--- a/src/Heightfield.cpp
+++ b/src/Heightfield.cpp
@@ -1,17 +1,18 @@
 
-#include <SDL/SDL.h>
+#include <SDL2/SDL.h>
 #include <GL/gl.h>
 #include <GL/glu.h>
 #include <math.h>
 #include "Vector3d.h"
 #include "Heightfield.h"
+#include "SDLWindow.h"
 
 #include "../models/spikeThingie.h"
 
 using std::cout;
 using std::endl;
 
-Heightfield::Heightfield(SDL_Surface *sdlsurf)
+Heightfield::Heightfield(SDL_Window *sdlsurf)
 {
 	surface = sdlsurf;
 
@@ -238,7 +239,7 @@
 		unsetOrtho();
 	}
 
-	SDL_GL_SwapBuffers();
+	SDL_GL_SwapWindow(mainWin->screen);
 }
 
 void Heightfield::init()
--- a/src/Metaballs.cpp
+++ b/src/Metaballs.cpp
@@ -1,10 +1,11 @@
 #include <iostream>
-#include <SDL/SDL.h>
+#include <SDL2/SDL.h>
 #include <GL/gl.h>
 #include <GL/glu.h>
 #include <math.h>
 #include "Vector3d.h"
 #include "Texture.h"
+#include "SDLWindow.h"
 
 #include "Metaballs.h"
 #include "PNGImage.h"
@@ -302,7 +303,7 @@
 	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
 };
 
-Metaballs::Metaballs(SDL_Surface *sdlsurf)
+Metaballs::Metaballs(SDL_Window *sdlsurf)
 {
 	surface = sdlsurf;
 
@@ -502,7 +503,7 @@
 		unsetOrtho();
 	}
 
-	SDL_GL_SwapBuffers();
+	SDL_GL_SwapWindow(mainWin->screen);
 }
 
 void Metaballs::init()
--- a/Makefile
+++ b/Makefile
@@ -7,8 +7,8 @@
 
 CXX := g++
 PKG_CONFIG:=pkg-config
-CXXFLAGS += -Wall -std=c++98 $(shell $(PKG_CONFIG) SDL_mixer sdl libpng glu gl --cflags)
-LDFLAGS += $(shell $(PKG_CONFIG) SDL_mixer sdl libpng glu gl --libs)
+CXXFLAGS += -Wall -std=c++98 $(shell $(PKG_CONFIG) SDL2_mixer sdl2 libpng glu gl --cflags)
+LDFLAGS += $(shell $(PKG_CONFIG) SDL2_mixer sdl2 libpng glu gl --libs) -Wl,--allow-multiple-definition
 
 RM_F := rm -f
 INSTALL := install
--- a/src/Bitmapfont.cpp
+++ b/src/Bitmapfont.cpp
@@ -1,4 +1,4 @@
-#include <SDL/SDL.h>
+#include <SDL2/SDL.h>
 #include <GL/gl.h>
 #include <GL/glu.h>
 #include <iostream>
@@ -20,7 +20,7 @@
 	delete fontMap;
 }
 
-void Bitmapfont::drawCharacter(SDL_Surface * surface, int x, int y, char c)
+void Bitmapfont::drawCharacter(SDL_Window * surface, int x, int y, char c)
 {
 	float s, t; // used for temperarily storage of vertex-coordinates
 
@@ -39,7 +39,7 @@
 	glEnd();
 }
 
-void Bitmapfont::drawString(SDL_Surface *surface, int x, int y, string s)
+void Bitmapfont::drawString(SDL_Window *surface, int x, int y, string s)
 {
 	int ix = x;
 	for (int i = 0; i < (int)s.length(); i++) {
--- a/src/Bitmapfont.h
+++ b/src/Bitmapfont.h
@@ -1,7 +1,7 @@
 #ifndef BITMAP_H_INCLUDED
 #define BITMAP_H_INCLUDED
 
-#include <SDL/SDL.h>
+#include <SDL2/SDL.h>
 #include <iostream>
 #include "Texture.h"
 
@@ -14,8 +14,8 @@
 Bitmapfont(const char* filename, char* chars, int char_width, int char_height);
 ~Bitmapfont();
 
-void drawCharacter(SDL_Surface *surface, int x, int y, char c);
-void drawString(SDL_Surface *surface, int x, int y, string s);
+void drawCharacter(SDL_Window *surface, int x, int y, char c);
+void drawString(SDL_Window *surface, int x, int y, string s);
 
 private:
 Texture *fontMap;
--- a/src/CylinderScene.cpp
+++ b/src/CylinderScene.cpp
@@ -1,5 +1,5 @@
 #include <iostream>
-#include <SDL/SDL.h>
+#include <SDL2/SDL.h>
 #include <GL/gl.h>
 #include <GL/glu.h>
 #include <math.h>
@@ -9,7 +9,7 @@
 using std::cout;
 using std::endl;
 
-CylinderScene::CylinderScene(SDL_Surface *sdlsurf)
+CylinderScene::CylinderScene(SDL_Window *sdlsurf)
 {
 	// initialize all 30 circles
 	for (int i = 0; i < 30; i++) {
--- a/src/Music.h
+++ b/src/Music.h
@@ -1,8 +1,8 @@
 #ifndef MUSIC_H_INCLUDED
 #define MUSIC_H_INCLUDED
 
-#include <SDL/SDL.h>
-#include <SDL/SDL_mixer.h>
+#include <SDL2/SDL.h>
+#include <SDL2/SDL_mixer.h>
 
 class Music
 {
--- a/src/Scene.h
+++ b/src/Scene.h
@@ -1,7 +1,7 @@
 #ifndef SCENE_H_INCLUDED
 #define SCENE_H_INCLUDED
 
-#include <SDL/SDL.h>
+#include <SDL2/SDL.h>
 
 class Scene
 {
@@ -16,7 +16,7 @@
 virtual void render();
 
 protected:
-SDL_Surface *surface;
+SDL_Window *surface;
 SDL_Event event;
 int done;                           // set to non-zero when scene is done
 unsigned int startTime;             // set to current time when scene starts
--- a/src/CelScene.h
+++ b/src/CelScene.h
@@ -9,7 +9,7 @@
 class CelScene : public Scene
 {
 public:
-CelScene(SDL_Surface *sdlsurf);
+CelScene(SDL_Window *sdlsurf);
 ~CelScene();
 
 void render();
--- a/src/LoaderBar.h
+++ b/src/LoaderBar.h
@@ -8,7 +8,7 @@
 class LoaderBar : public Scene
 {
 public:
-LoaderBar(SDL_Surface *sdlsurf);
+LoaderBar(SDL_Window *sdlsurf);
 ~LoaderBar();
 
 void render();
--- a/src/Metaballs.h
+++ b/src/Metaballs.h
@@ -11,7 +11,7 @@
 class Metaballs : public Scene
 {
 public:
-Metaballs(SDL_Surface *sdlsurf);
+Metaballs(SDL_Window *sdlsurf);
 ~Metaballs();
 
 void render();
--- a/src/Greetings.h
+++ b/src/Greetings.h
@@ -8,7 +8,7 @@
 class Greetings : public Scene
 {
 public:
-Greetings(SDL_Surface *sdlsurf);
+Greetings(SDL_Window *sdlsurf);
 ~Greetings();
 
 void render();
--- a/src/Heightfield.h
+++ b/src/Heightfield.h
@@ -9,7 +9,7 @@
 class Heightfield : public Scene
 {
 public:
-Heightfield(SDL_Surface *sdlsurf);
+Heightfield(SDL_Window *sdlsurf);
 ~Heightfield();
 
 void render();
--- a/src/FunkyBackground.h
+++ b/src/FunkyBackground.h
@@ -8,7 +8,7 @@
 class FunkyBackground : public Scene
 {
 public:
-FunkyBackground(SDL_Surface *sdlsurf);
+FunkyBackground(SDL_Window *sdlsurf);
 ~FunkyBackground();
 
 void render();
--- a/src/CylinderScene.h
+++ b/src/CylinderScene.h
@@ -14,7 +14,7 @@
 class CylinderScene : public Scene
 {
 public:
-CylinderScene(SDL_Surface *sdlsurf);
+CylinderScene(SDL_Window *sdlsurf);
 ~CylinderScene();
 
 void render();
