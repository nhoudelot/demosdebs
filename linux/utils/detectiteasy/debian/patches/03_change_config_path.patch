--- a/XOptions/xoptions.cpp
+++ b/XOptions/xoptions.cpp
@@ -224,7 +224,7 @@
     if (bIsNative) {
         pSettings = new QSettings;
     } else {
-        pSettings = new QSettings(getApplicationDataPath() + QDir::separator() + QString("%1").arg(g_sName), QSettings::IniFormat);
+        pSettings = new QSettings(getConfigPath()+QDir::separator()+QString("%1").arg(g_sName),QSettings::IniFormat);
     }
 
 #ifdef QT_DEBUG
@@ -483,6 +483,14 @@
     return sResult;
 }
 
+QString XOptions::getConfigPath()
+{
+    QString sResult;
+    sResult=QStandardPaths::writableLocation(QStandardPaths::AppConfigLocation);
+
+    return sResult;
+}
+
 void XOptions::setLastDirectory(const QString &sPathName)
 {
     QString _sPathName = sPathName;
@@ -772,7 +780,7 @@
         pComboBox->addItem("English", "");
         pComboBox->addItem("System", "System");
 
-        QList<QString> listFileNames = getAllFilesFromDirectory(getApplicationLangPath(), "*.qm");
+        QList<QString> listFileNames = getAllFilesFromDirectory("/usr/share/detectiteasy/lang","*.qm");
 
         qint32 nNumberOfRecords = listFileNames.count();
 
@@ -799,7 +807,7 @@
     } else if (id == ID_VIEW_QSS) {
         pComboBox->addItem("Default", "");
 
-        QList<QString> listFileNames = getAllFilesFromDirectory(getApplicationQssPath(), "*.qss");
+        QList<QString> listFileNames = getAllFilesFromDirectory("/usr/share/detectiteasy/qss","*.qss");
 
         qint32 nNumberOfRecords = listFileNames.count();
 
@@ -1534,7 +1542,7 @@
                 sResult = sApplicationDirPath.section("/", 0, 2);
             }
 
-            sResult += QString("/usr/lib/%1").arg(qApp->applicationName());
+            sResult += QString("/usr/share/detectiteasy").arg(qApp->applicationName());
         }
     } else {
         sResult = sApplicationDirPath;
--- a/XOptions/xoptions.h
+++ b/XOptions/xoptions.h
@@ -26,6 +26,7 @@
 #include <QSettings>
 #include <QSysInfo>
 #include <QTranslator>
+#include <QStandardPaths>
 // #include <QVector>
 #ifdef QT_GUI_LIB
 #include <QApplication>
@@ -257,6 +258,7 @@
     static QList<QString> getAllFilesFromDirectory(const QString &sDirectory, const QString &sExtension);
     static bool checkNative(const QString &sIniFileName);
     QString getApplicationDataPath();
+    static QString getConfigPath();
     static QString getTitle(const QString &sName, const QString &sVersion, bool bShowOS = true);
     bool isWritable();
 #ifdef QT_GUI_LIB
