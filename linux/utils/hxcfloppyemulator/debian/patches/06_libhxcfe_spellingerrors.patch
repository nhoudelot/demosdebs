--- a/libhxcfe/trunk/sources/loaders/amigadosfs_loader/amigadosfs_loader.c
+++ b/libhxcfe/trunk/sources/loaders/amigadosfs_loader/amigadosfs_loader.c
@@ -225,7 +225,7 @@
 										byte_written=adfWriteFile(adffile, size, tempbuffer);
 										if((byte_written!=size) || (adfCountFreeBlocks(adfvolume)<2) )
 										{
-											floppycontext->hxc_printf(MSG_ERROR,"Error while writting the file %s. No more free block ?",FindFileData.filename);
+											floppycontext->hxc_printf(MSG_ERROR,"Error while writing the file %s. No more free block ?",FindFileData.filename);
 											adfCloseFile(adffile);
 											hxc_fclose(ftemp);
 											free(fullpath);
--- a/libhxcfe/trunk/sources/thirdpartylibs/adflib/AUTHORS.txt
+++ b/libhxcfe/trunk/sources/thirdpartylibs/adflib/AUTHORS.txt
@@ -1,13 +1,13 @@
 
-The main developper is 
+The main developer is
  Laurent ClÃ©vy (laurent.clevy@club-internet.fr)
 
 Contributors are:
- Bjarne Viksoe 
+ Bjarne Viksoe
    (C++ wrapper, lot of bug fixes)
- Gary Harris 
+ Gary Harris
    (bug fixes and W32 support)
- Dan Sutherland 
+ Dan Sutherland
    (bug fixes and W32 support)
 
 See CHANGES.txt for detailed contributions.
--- a/libhxcfe/trunk/sources/loaders/ede_loader/ede_loader.c
+++ b/libhxcfe/trunk/sources/loaders/ede_loader/ede_loader.c
@@ -100,7 +100,7 @@
 					imgldr_ctx->hxcfe->hxc_printf(MSG_INFO_0,"EDE_libIsValidDiskFile : TS-10/12 DD format");
 				break;
 				default:
-					imgldr_ctx->hxcfe->hxc_printf(MSG_ERROR,"EDE_libIsValidDiskFile : Unknow format : %x !",imgfile->file_header[0x1FF]);
+					imgldr_ctx->hxcfe->hxc_printf(MSG_ERROR,"EDE_libIsValidDiskFile : Unknown format : %x !",imgfile->file_header[0x1FF]);
 					return HXCFE_BADFILE;
 				break;
 			}
@@ -274,7 +274,7 @@
 				break;
 
 			default:
-				imgldr_ctx->hxcfe->hxc_printf(MSG_ERROR,"Unknow format : %x !",header_buffer[0x1FF]);
+				imgldr_ctx->hxcfe->hxc_printf(MSG_ERROR,"Unknown format : %x !",header_buffer[0x1FF]);
 				hxc_fclose(f);
 				return HXCFE_BADFILE;
 			break;
--- a/libhxcfe/trunk/sources/loaders/hfe_loader/hfe_loader.c
+++ b/libhxcfe/trunk/sources/loaders/hfe_loader/hfe_loader.c
@@ -155,7 +155,7 @@
 			floppydisk->floppyNumberOfSide,
 			floppydisk->floppyBitRate,
 			floppydisk->floppySectorPerTrack,
-			floppydisk->floppyiftype<0xC?interfacemodecode[floppydisk->floppyiftype]:"Unknow!",
+			floppydisk->floppyiftype<0xC?interfacemodecode[floppydisk->floppyiftype]:"Unknown!",
 			(header.track_encoding&(~3))?trackencodingcode[4]:trackencodingcode[header.track_encoding&0x3]);
 
         trackoffsetlist=(pictrack*)malloc(sizeof(pictrack)* header.number_of_track);
--- a/libhxcfe/trunk/sources/loaders/hfe_loader/hfev3_loader.c
+++ b/libhxcfe/trunk/sources/loaders/hfe_loader/hfev3_loader.c
@@ -216,7 +216,7 @@
 			floppydisk->floppyNumberOfSide,
 			floppydisk->floppyBitRate,
 			floppydisk->floppySectorPerTrack,
-			floppydisk->floppyiftype<0xC?interfacemodecode[floppydisk->floppyiftype]:"Unknow!",
+			floppydisk->floppyiftype<0xC?interfacemodecode[floppydisk->floppyiftype]:"Unknown!",
 			(header.track_encoding&(~3))?trackencodingcode[4]:trackencodingcode[header.track_encoding&0x3]);
 
         trackoffsetlist=(pictrack*)malloc(sizeof(pictrack)* header.number_of_track);
--- a/libhxcfe/trunk/sources/loaders/sap_loader/sap_loader.c
+++ b/libhxcfe/trunk/sources/loaders/sap_loader/sap_loader.c
@@ -139,7 +139,7 @@
 		trackformat=ISOFORMAT_SD;
 		break;
 	default:
-		imgldr_ctx->hxcfe->hxc_printf(MSG_ERROR,"Unknow floppy format: %d !",floppyformat);
+		imgldr_ctx->hxcfe->hxc_printf(MSG_ERROR,"Unknown floppy format: %d !",floppyformat);
 		sap_CloseArchive(sapid);
 		return -1;
 		break;
--- a/libhxcfe/trunk/sources/loaders/stx_loader/stx_loader.c
+++ b/libhxcfe/trunk/sources/loaders/stx_loader/stx_loader.c
@@ -707,7 +707,7 @@
 						{
 							hxc_fread( &temp_val, sizeof(unsigned short), f );
 #ifdef PASTI_DBG
-							imgldr_ctx->hxcfe->hxc_printf(MSG_DEBUG,"Unknow value 0x%X",temp_val);
+							imgldr_ctx->hxcfe->hxc_printf(MSG_DEBUG,"Unknown value 0x%X",temp_val);
 #endif
 						}
 
--- a/libhxcfe/trunk/sources/tracks/display_track.c
+++ b/libhxcfe/trunk/sources/tracks/display_track.c
@@ -779,7 +779,7 @@
 								{
 									if(sc->startdataindex == sc->startsectorindex)
 									{
-										// Unknow size (no header) : blue
+										// Unknown size (no header) : blue
 										for(j=50;j<(td->ysize-10);j++)
 										{
 											col=(s_col *)&td->framebuffer[(td->xsize*j) + i];
--- a/libhxcfe/trunk/sources/stream_analyzer/fluxStreamAnalyzer.c
+++ b/libhxcfe/trunk/sources/stream_analyzer/fluxStreamAnalyzer.c
@@ -2328,7 +2328,7 @@
 
 			/////////////////////////////////////////////////////////
 #ifdef FLUXSTREAMDBG
-			floppycontext->hxc_printf(MSG_DEBUG,"-------- Fisrt Loop state ---------");
+			floppycontext->hxc_printf(MSG_DEBUG,"-------- First Loop state ---------");
 
 			// print missing blocks.
 			for(block_num=0;block_num<tb->number_of_blocks;block_num++)
@@ -2412,7 +2412,7 @@
 											block_analysed++;
 											c = 0;
 #ifdef FLUXSTREAMDBG
-											floppycontext->hxc_printf(MSG_DEBUG,"Multi match block %d position corrected with the next block alignement",block_num);
+											floppycontext->hxc_printf(MSG_DEBUG,"Multi match block %d position corrected with the next block alignment",block_num);
 #endif
 										}
 										else
@@ -2433,7 +2433,7 @@
 											tb->blocks[block_num].locked = 1;
 											block_analysed++;
 #ifdef FLUXSTREAMDBG
-											floppycontext->hxc_printf(MSG_DEBUG,"Multi match block %d position corrected with the next block alignement",block_num);
+											floppycontext->hxc_printf(MSG_DEBUG,"Multi match block %d position corrected with the next block alignment",block_num);
 #endif
 										}
 										else
@@ -2458,7 +2458,7 @@
 											block_analysed++;
 											c = 0;
 #ifdef FLUXSTREAMDBG
-											floppycontext->hxc_printf(MSG_DEBUG,"NOMATCH Block %d position corrected with the next block alignement",block_num);
+											floppycontext->hxc_printf(MSG_DEBUG,"NOMATCH Block %d position corrected with the next block alignment",block_num);
 #endif
 										}
 										else
@@ -2495,7 +2495,7 @@
 											tb->blocks[block_num].locked = 1;
 											block_analysed++;
 #ifdef FLUXSTREAMDBG
-											floppycontext->hxc_printf(MSG_DEBUG,"NOMATCH_STATE block %d position corrected with the next block alignement",block_num);
+											floppycontext->hxc_printf(MSG_DEBUG,"NOMATCH_STATE block %d position corrected with the next block alignment",block_num);
 #endif
 										}
 										else
@@ -2576,7 +2576,7 @@
 											block_analysed++;
 											c = 0;
 #ifdef FLUXSTREAMDBG
-											floppycontext->hxc_printf(MSG_DEBUG,"Multi match block %d position corrected with the next block alignement",block_num);
+											floppycontext->hxc_printf(MSG_DEBUG,"Multi match block %d position corrected with the next block alignment",block_num);
 #endif
 										}
 										else
@@ -2597,7 +2597,7 @@
 											tb->blocks[block_num].locked = 1;
 											block_analysed++;
 #ifdef FLUXSTREAMDBG
-											floppycontext->hxc_printf(MSG_DEBUG,"Multi match block %d position corrected with the next block alignement",block_num);
+											floppycontext->hxc_printf(MSG_DEBUG,"Multi match block %d position corrected with the next block alignment",block_num);
 #endif
 										}
 										else
@@ -3391,7 +3391,7 @@
 	fxs->hxcfe->hxc_printf(MSG_DEBUG,"Bitrate: %d",side->bitrate);
 	fxs->hxcfe->hxc_printf(MSG_DEBUG,"Number of sector: %d",side->number_of_sector);
 	fxs->hxcfe->hxc_printf(MSG_DEBUG,"Track encoding: %d",side->track_encoding);
-	fxs->hxcfe->hxc_printf(MSG_DEBUG,"Track lenght: %d cells",side->tracklen);
+	fxs->hxcfe->hxc_printf(MSG_DEBUG,"Track length: %d cells",side->tracklen);
 
 	nbbadbit = 0;
 
@@ -3646,7 +3646,7 @@
 					if(pl->forward_link[first_index] == 1)
 					{
 #ifdef FLUXSTREAMDBG
-						fxs->hxcfe->hxc_printf(MSG_DEBUG,"Dummy overlap - Use the index to index track lenght instead");
+						fxs->hxcfe->hxc_printf(MSG_DEBUG,"Dummy overlap - Use the index to index track length instead");
 #endif
 						first_index = std->index_evt_tab[hxcfe_FxStream_GetRevolutionIndex( fxs, std, revolution )].dump_offset;
 
--- a/libhxcfe/trunk/sources/thirdpartylibs/adflib/Lib/adf_file.c
+++ b/libhxcfe/trunk/sources/thirdpartylibs/adflib/Lib/adf_file.c
@@ -498,7 +498,7 @@
     if (file->pos==0 || file->posInDataBlk==blockSize) {
         if (adfCreateNextFileBlock(file)==-1) {
             /* bug found by Rikard */
-            (*adfEnv.wFct)("adfWritefile : no more free sector availbale");                        
+            (*adfEnv.wFct)("adfWritefile : no more free sector available");
             return bytesWritten;
         }
         file->posInDataBlk = 0;
@@ -515,7 +515,7 @@
         if (file->posInDataBlk==blockSize && bytesWritten<n) {
             if (adfCreateNextFileBlock(file)==-1) {
                 /* bug found by Rikard */
-                (*adfEnv.wFct)("adfWritefile : no more free sector availbale");                        
+                (*adfEnv.wFct)("adfWritefile : no more free sector available");
                 return bytesWritten;
             }
             file->posInDataBlk = 0;
--- a/libhxcfe/trunk/sources/loaders/kryofluxstream_loader/kryofluxstream.c
+++ b/libhxcfe/trunk/sources/loaders/kryofluxstream_loader/kryofluxstream.c
@@ -201,7 +201,7 @@
 				cur_op = kfstreambuffer[stream_ofs];
 				cur_op_len = 0;
 
-				// Set Operation / Data code lenght
+				// Set Operation / Data code length
 				switch (cur_op)
 				{
 					case KF_STREAM_OP_NOP1:
--- a/libhxcfe/trunk/sources/loaders/d88_loader/d88_loader.c
+++ b/libhxcfe/trunk/sources/loaders/d88_loader/d88_loader.c
@@ -224,7 +224,7 @@
 
 		default:
 			side=2;
-			imgldr_ctx->hxcfe->hxc_printf(MSG_ERROR,"unknow disk: %.2X !",fileheader.media_flag);
+			imgldr_ctx->hxcfe->hxc_printf(MSG_ERROR,"unknown disk: %.2X !",fileheader.media_flag);
 			hxc_fclose(f);
 			return HXCFE_BADFILE;
 			break;
--- a/libhxcfe/trunk/sources/loaders/oricdsk_loader/oricdsk_loader.c
+++ b/libhxcfe/trunk/sources/loaders/oricdsk_loader/oricdsk_loader.c
@@ -378,7 +378,7 @@
 			mfmformat=1;
 			geometrie=fileheader->number_of_sectors_geometrie;
 			floppydisk->floppySectorPerTrack=-1;
-			imgldr_ctx->hxcfe->hxc_printf(MSG_DEBUG,"OricDSK_libLoad_DiskFile MFM_DISK %d tracks %d sides geometrie %d (regenerate mode : %d)",floppydisk->floppyNumberOfTrack,floppydisk->floppyNumberOfSide,geometrie,regenerate_mode);
+			imgldr_ctx->hxcfe->hxc_printf(MSG_DEBUG,"OricDSK_libLoad_DiskFile MFM_DISK %d tracks %d sides Geometry %d (regenerate mode : %d)",floppydisk->floppyNumberOfTrack,floppydisk->floppyNumberOfSide,geometrie,regenerate_mode);
 		}
 		else
 		{
@@ -443,7 +443,7 @@
 				switch(geometrie)
 				{
 				case 1:
-					imgldr_ctx->hxcfe->hxc_printf(MSG_DEBUG,"Geometrie 1:  11111..000000!");
+					imgldr_ctx->hxcfe->hxc_printf(MSG_DEBUG,"Geometry 1:  11111..000000!");
 					tracksize=(((filesize-256)/fileheader->number_of_side)/fileheader->number_of_tracks);
 
 					trackdata = (unsigned char *) malloc(tracksize);
@@ -483,9 +483,9 @@
 				break;
 
 				case 0:
-					imgldr_ctx->hxcfe->hxc_printf(MSG_DEBUG,"Geometrie 0 ?: using Geometrie 2");
+					imgldr_ctx->hxcfe->hxc_printf(MSG_DEBUG,"Geometry 0 ?: using Geometry 2");
 				case 2:
-					imgldr_ctx->hxcfe->hxc_printf(MSG_DEBUG,"Geometrie 2:  01010101010...!");
+					imgldr_ctx->hxcfe->hxc_printf(MSG_DEBUG,"Geometry 2:  01010101010...!");
 
 					tracksize=(((filesize-256)/fileheader->number_of_side)/fileheader->number_of_tracks);
 
--- a/HxCFloppyEmulator_software/trunk/sources/gui/cb_usbhxcfecfg_window.cxx
+++ b/HxCFloppyEmulator_software/trunk/sources/gui/cb_usbhxcfecfg_window.cxx
@@ -139,7 +139,7 @@
 		break;
 
 		default:
-			window->strout_usbhfestatus->value((const char*)"Unknow status !");
+			window->strout_usbhfestatus->value((const char*)"Unknown status !");
 		break;
 
 	}
@@ -232,4 +232,4 @@
 #if !defined(STANDALONEFSBROWSER) && !defined(HXC_STREAMER_MODE)
 	libusbhxcfe_getStats(guicontext->hxcfe,guicontext->usbhxcfe,&stats,1);
 #endif
-}
\ No newline at end of file
+}
--- a/libhxcfe/trunk/sources/loaders/apridisk_loader/apridisk_loader.c
+++ b/libhxcfe/trunk/sources/loaders/apridisk_loader/apridisk_loader.c
@@ -215,7 +215,7 @@
 							break;
 
 						default:
-							imgldr_ctx->hxcfe->hxc_printf(MSG_ERROR,"Unknow compression id (%.4x) !",data_record->compression);
+							imgldr_ctx->hxcfe->hxc_printf(MSG_ERROR,"Unknown compression id (%.4x) !",data_record->compression);
 							sectorconfig[number_of_sector].input_data=0;
 							break;
 						}
@@ -373,5 +373,4 @@
 			&plug_funcs,
 			plug_ext
 			);
-}
-
+}
--- a/libhxcfe/trunk/sources/loaders/streamhfe_loader/streamhfe_loader.c
+++ b/libhxcfe/trunk/sources/loaders/streamhfe_loader/streamhfe_loader.c
@@ -400,7 +400,7 @@
 			floppydisk->floppyNumberOfSide,
 			floppydisk->floppyBitRate,
 			floppydisk->floppySectorPerTrack,
-			floppydisk->floppyiftype<0xC?interfacemodecode[floppydisk->floppyiftype]:"Unknow!");
+			floppydisk->floppyiftype<0xC?interfacemodecode[floppydisk->floppyiftype]:"Unknown!");
 
 		trackoffsetlist = (streamhfe_track_def*)malloc(sizeof(streamhfe_track_def) * (header.number_of_track*header.number_of_side));
 		if(!trackoffsetlist)
--- a/HxCFloppyEmulator_software/trunk/sources/gui/gui_strings.cxx
+++ b/HxCFloppyEmulator_software/trunk/sources/gui/gui_strings.cxx
@@ -212,7 +212,7 @@
 	{ STR_RAWLOADERWINDOW_0003, "Inter side sector numbering" },
 	{ STR_RAWLOADERWINDOW_0004, "Tracks of a side grouped in the file" },
 	{ STR_RAWLOADERWINDOW_0005, "Auto GAP3" },
-	{ STR_RAWLOADERWINDOW_0006, "PRE-GAP lenght" },
+	{ STR_RAWLOADERWINDOW_0006, "PRE-GAP length" },
 	{ STR_RAWLOADERWINDOW_0007, "Format value" },
 	{ STR_RAWLOADERWINDOW_0008, "Interleave" },
 	{ STR_RAWLOADERWINDOW_0009, "Skew" },
@@ -230,7 +230,7 @@
 	{ STR_RAWLOADERWINDOW_0021, "Load config" },
 	{ STR_RAWLOADERWINDOW_0023, "Sector size" },
 	{ STR_RAWLOADERWINDOW_0024, "Track type" },
-	{ STR_RAWLOADERWINDOW_0025, "GAP3 lenght" },
+	{ STR_RAWLOADERWINDOW_0025, "GAP3 length" },
 	{ STR_RAWLOADERWINDOW_0026, "Number of side" },
 	{ STR_RAWLOADERWINDOW_0027, "Predefined Disk Layout" },
 
@@ -279,4 +279,4 @@
 		return strings_list[i].string;
 
 	return 0;
-}
\ No newline at end of file
+}
--- a/HxCFloppyEmulator_software/trunk/sources/gui/fluid/floppy_streamer_window.fl
+++ b/HxCFloppyEmulator_software/trunk/sources/gui/fluid/floppy_streamer_window.fl
@@ -201,7 +201,7 @@
         xywh {1134 518 40 15} labelsize 8 textsize 10
       }
       Fl_Input dump_lenght {
-        label {lenght (ms)}
+        label {length (ms)}
         xywh {1134 531 40 15} labelsize 8 textsize 10
       }
       Fl_Input index_delay {
--- a/HxCFloppyEmulator_software/trunk/sources/gui/fluid/rawfile_loader_window.fl
+++ b/HxCFloppyEmulator_software/trunk/sources/gui/fluid/rawfile_loader_window.fl
@@ -36,7 +36,7 @@
         xywh {130 212 85 25} down_box DOWN_BOX labelsize 12
       }
       Fl_Value_Input numin_pregap {
-        label {PRE-GAP lenght}
+        label {PRE-GAP length}
         user_data this
         callback raw_loader_window_datachanged
         xywh {230 216 95 20} labelsize 12 align 5 textsize 12
@@ -147,7 +147,7 @@
         xywh {10 20 105 20} down_box BORDER_BOX labelsize 12 align 5 when 1 textsize 11
       } {}
       Fl_Value_Input numin_gap3 {
-        label {GAP3 lenght}
+        label {GAP3 length}
         user_data this
         callback raw_loader_window_datachanged
         xywh {10 215 105 20} labelsize 12 align 5 textsize 12
