Description: fixing several simple warnings 
Author: Nicolas HOUDELOT <nicolas@demosdebs.org>
Applied-Upstream: no
Last-Update: 2020-04-27
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/main.c
+++ b/main.c
@@ -1,5 +1,4 @@
 //3703
-#define _GNU_SOURCE
 #include <time.h>
 #include <stdlib.h>
 #include <stdio.h>
@@ -238,8 +237,8 @@
 		tab[i]=j<0 ? 0 : j>255 ? 255 : j;
 	}
 	for (y=0; y<ys; y++) {
-		dp=dbuf+y*pitch;
-		sp=sbuf+y*pitch;
+		dp=(unsigned char *)dbuf+y*pitch;
+		sp=(unsigned char *)sbuf+y*pitch;
 		for (x=0; x<xs; x+=4) {
 			*dp++=tab[*sp++]; *dp++=tab[*sp++]; *dp++=tab[*sp++]; *dp++=tab[*sp++];
 		}
@@ -463,9 +462,9 @@
 		}
 		gounter=0;
 		if (!effu) desing(ovl->pixels[0], ovl->pitches[0], 320, 240, /*module->sngpos+fmod(*/ timex*(1./1000/60*125/16*6/6.5) /*, 1)*/);
-		if (effu&1) rend(ovl->pixels[0], ovl->pitches[0], 320, 224, tsot, 5);
+		if (effu&1) rend((char *)ovl->pixels[0], ovl->pitches[0], 320, 224, tsot, 5);
 //    rend(ovl->pixels[0], ovl->pitches[0], 320, 240, tsot, 3);
-		if (effu&2) getframe(ovl->pixels[0], ovl->pitches[0], mov, 320, 240, timex*8);
+		if (effu&2) getframe((char *)ovl->pixels[0], ovl->pitches[0], mov, 320, 240, timex*8);
 		if (effu&4) {
 			short buf[64000], *s;
 			int x, y;
@@ -474,7 +473,7 @@
 			teesumu(buf, timex*.03);
 			for (x=0; x<1024; x++) tab[x]=sqrt(x*63.9);
 			for (y=0; y<360; y++) {
-				d=ovl->pixels[0]+y*ovl->pitches[0];
+				d=(char *)ovl->pixels[0]+y*ovl->pitches[0];
 				s=buf+(y>>1)*160;
 				for (x=0; x<160; x++, s++) {
 					int c=*s>>4;
--- a/desing.c
+++ b/desing.c
@@ -231,18 +231,18 @@
 
 
 	switch (xrand(6, phi)) {
-	case 0: rend(buf, pitch, xs, ys, tsot, 5); break;
-	case 5: rend(buf, pitch, xs, ys, tsot, 5); break;
-	case 1: getframe(buf, pitch, mov, xs, ys, phi*16384*2); break;
-	case 2: duunaa_sumu(buf, pitch, xs, ys, phi*(256+phi)); break;
-	case 3: duunaa_sumu(buf, pitch, xs, ys, phi*(386+phi*1.5)); break;
+	case 0: rend((char *)buf, pitch, xs, ys, tsot, 5); break;
+	case 5: rend((char *)buf, pitch, xs, ys, tsot, 5); break;
+	case 1: getframe((char *)buf, pitch, mov, xs, ys, phi*16384*2); break;
+	case 2: duunaa_sumu((char *)buf, pitch, xs, ys, phi*(256+phi)); break;
+	case 3: duunaa_sumu((char *)buf, pitch, xs, ys, phi*(386+phi*1.5)); break;
 	case 4: {
 		unsigned char *buf2=malloc(pitch*ys), *d=buf, *s=buf2;
 		if (xrand(2, phi)==0)
-			duunaa_sumu(buf, pitch, xs, ys, phi*1.5*(512-phi*2.5));
+			duunaa_sumu((char *)buf, pitch, xs, ys, phi*1.5*(512-phi*2.5));
 		else
-			getframe(buf, pitch, mov, xs, ys, phi*16384*2);
-		duunaa_sumu(buf2, pitch, xs, ys, phi*(512-phi*2.5));
+			getframe((char *)buf, pitch, mov, xs, ys, phi*16384*2);
+		duunaa_sumu((unsigned char *)buf2, pitch, xs, ys, phi*(512-phi*2.5));
 		for (; d<buf+ys*pitch; s+=4, d+=4) d[0]=d[0]*s[0]>>8,d[1]=d[1]*s[1]>>8,d[2]=d[2]*s[2]>>8,d[3]=d[3]*s[3]>>8;
 		free(buf2);
 	} break;
@@ -263,19 +263,16 @@
 	case 2: foofoo(buf, pitch, xs, ys, 32+32*sin(phi*0.5) ); break;
 	}
 	if(xrand(10,phi)<2) {
-		duunaa_kirkkovene(buf, buf, pitch, xs, ys, -kont, bri+1, .1, 0, 0);
+		duunaa_kirkkovene((char *)buf, (char *)buf, pitch, xs, ys, -kont, bri+1, .1, 0, 0);
 	} else {
-		duunaa_kirkkovene(buf, buf, pitch, xs, ys, kont, bri, .1, 0, 0);
+		duunaa_kirkkovene((char *)buf,(char *) buf, pitch, xs, ys, kont, bri, .1, 0, 0);
 	}
 //  duunaa_kirkkovene(buf, buf, pitch, xs, ys, kont*sin(1-fmod(phi*4,1)), bri*sin(1-fmod(phi*4,1)), .1, 0, 0);
 //  duunaa_kirkkovene(buf, buf, pitch, xs, ys, kont, bri, .1, 0, 0);
 //  foofoo(buf, pitch, xs, ys, 128+128*sin(1-fmod(phi*0.25,1)) );
 //  glaah(buf, pitch, xs, ys, 128+128*sin(1-fmod(phi*0.25,1)) );
 
-	duunaa_kirkkovene(buf, buf, pitch, xs, ys, 1, 0, 7, 0, 0);
+	duunaa_kirkkovene((char *)buf, (char *)buf, pitch, xs, ys, 1, 0, 7, 0, 0);
 
 }
 
-
-
-
--- a/sumu.c
+++ b/sumu.c
@@ -43,16 +43,22 @@
 }
 int xnoise(int x, int y, int z) {
 	int xx,yy,zz,x2,y2,z2;
-	xx=x&1023; yy=y&1023; zz=z&1023;
-	xx=xx*xx*(1536-xx)>>19;
-	yy=yy*yy*(1536-yy)>>19;
-	zz=zz*zz*(1536-zz)>>19;
-	x2=1024-xx; y2=1024-yy; z2=1024-zz;
-	x>>=10; y>>=10; z>>=10;
-	return ((ixnoise(x,y,z  )*x2+ixnoise(x+1,y,z  )*xx)*y2
-	        +(ixnoise(x,y+1,z  )*x2+ixnoise(x+1,y+1,z  )*xx)*yy>>15)*z2
-	       +((ixnoise(x,y,z+1)*x2+ixnoise(x+1,y,z+1)*xx)*y2
-	         +(ixnoise(x,y+1,z+1)*x2+ixnoise(x+1,y+1,z+1)*xx)*yy>>15)*zz>>15;
+	xx=x&1023;
+	yy=y&1023;
+	zz=z&1023;
+	xx=(xx*xx*(1536-xx))>>19;
+	yy=(yy*yy*(1536-yy))>>19;
+	zz=(zz*zz*(1536-zz))>>19;
+	x2=1024-xx;
+	y2=1024-yy;
+	z2=1024-zz;
+	x>>=10;
+	y>>=10;
+	z>>=10;
+	return ((((ixnoise(x,y,z)*x2+ixnoise(x+ 1,y,z)*xx)*y2
+		+(ixnoise(x,y+1,z)*x2+ixnoise(x+1,y+1,z)*xx)*yy)>>15)*z2
+		+(((ixnoise(x,y,z+1)*x2+ixnoise(x+1,y,z+1)*xx)*y2
+			+(ixnoise(x,y+1,z+1)*x2+ixnoise(x+1,y+1,z+1)*xx)*yy)>>15)*zz)>>15;
 }
 
 
@@ -67,12 +73,15 @@
 static float parti[32768*4];
 float emmental(float *p, float k, float s, float z) {
 	float x=
-		xnoise((p[0]+7566.8766)*k, (p[1]+2334.675)*k, (p[2]+6547.9257)*k)*4*(1/2048.0)-1;
+		xnoise((p[0]+7566.8766f)*k,(p[1]+2334.675f)*k,(p[2]+6547.9257f)*k)*4*(1.0f/2048.0f)-1.0f;
 	s*=k;
-	x=1-x*x*z; if (x<-1) x=-1;
-	if (s<1000.0) x+=1000.0/s-1;
-	if (s>2000.0) x+=(s-2000.0)*0.0005;
-	if (x<0) x=0; if (x>1) x=1; return x;
+	x=1-x*x*z;
+	if (x<-1) x=-1;
+	if (s<1000.0f) x+=1000.0f/s-1.0f;
+	if (s>2000.0f) x+=(s-2000.0f)*0.0005f;
+	if (x<0) x=0;
+	if (x>1) x=1;
+	return x;
 }
 void presumu() {
 	float *p, r, s;
@@ -81,7 +90,7 @@
 	for (i=0; i<1024; i++) j=rand()&1023, k=nbuf[i], nbuf[i]=nbuf[j], nbuf[j]=k;
 
 	for (p=parti; p<parti+sizeof(parti)/sizeof(parti[0]); p+=4) {
-		if ((p-parti&1023)==0) printf("."), fflush(stdout);
+		if (((p-parti)&1023)==0)printf("."),fflush(stdout);
 		do {
 			do {
 				s=rand()*(1./RAND_MAX); s=64*exp(-s*8);
@@ -148,11 +157,25 @@
 			y2=lrint((yy+p[3]*2)*zz); if (y2<0) continue;
 			y3=lrint((yy-p[3]*2)*zz); if (y3>239) continue;
 			x=lrint(xx*zz); y=lrint(yy*zz);
-			if (x <0) x =0; if (y <0) y =0; if (x >159) x =159; if (y >239) y =239;
-			if (x3<0) x3=0; if (y3<0) y3=0; if (x2>159) x2=159; if (y2>239) y2=239;
-			y*=160; y2*=160; y3*=160;
-			tmp[y3+x3]++;  tmp[y2+x3]--;  tmp[y3+x2]--;  tmp[y2+x2]++;
-			tmp[y +x ]+=3; tmp[y2+x ]-=3; tmp[y +x2]-=3; tmp[y2+x2]+=3;
+			if (x <0) x =0;
+			if (y <0) y =0;
+			if (x >159) x =159;
+			if (y >239) y =239;
+			if (x3<0) x3=0;
+			if (y3<0) y3=0;
+			if (x2>159) x2=159;
+			if (y2>239) y2=239;
+			y*=160;
+			y2*=160;
+			y3*=160;
+			tmp[y3+x3]++;
+			tmp[y2+x3]--;
+			tmp[y3+x2]--;
+			tmp[y2+x2]++;
+			tmp[y +x ]+=3;
+			tmp[y2+x ]-=3;
+			tmp[y +x2]-=3;
+			tmp[y2+x2]+=3;
 		}
 	}
 
--- a/vox.c
+++ b/vox.c
@@ -119,10 +119,10 @@
 			if (vp[1].maxv>vp[0].maxv) vp[0].maxv=vp[1].maxv;
 		}
 	for (vp=vbuf, yy=0; yy<ys>>5; yy++, vp++) for (xx=0; xx<xs>>5; xx++, vp++) {
-			if (vp[xs+32>>5].min<vp[0].min) vp[0].min=vp[xs+32>>5].min;
-			if (vp[xs+32>>5].max>vp[0].max) vp[0].max=vp[xs+32>>5].max;
-			if (vp[xs+32>>5].minv<vp[0].minv) vp[0].minv=vp[xs+32>>5].minv;
-			if (vp[xs+32>>5].maxv>vp[0].maxv) vp[0].maxv=vp[xs+32>>5].maxv;
+			if (vp[(xs + 32) >> 5].min < vp[0].min) vp[0].min = vp[(xs + 32) >> 5].min;
+			if (vp[(xs + 32) >> 5].max > vp[0].max) vp[0].max = vp[(xs + 32) >> 5].max;
+			if (vp[(xs + 32) >> 5].minv < vp[0].minv) vp[0].minv = vp[(xs + 32) >> 5].minv;
+			if (vp[(xs + 32) >> 5].maxv > vp[0].maxv) vp[0].maxv = vp[(xs + 32) >> 5].maxv;
 		}
 	for (yy=0; yy<ys>>5; yy++) for (xx=0; xx<xs>>5; xx++) {
 			vp=vbuf+yy*(xs+32>>5)+xx;
