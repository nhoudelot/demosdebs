Description: fixing several simple warnings 
Author: Nicolas HOUDELOT <nicolas@demosdebs.org>
Applied-Upstream: no
Last-Update: 2020-04-27
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/main.c
+++ b/main.c
@@ -1,5 +1,4 @@
 //3703
-#define _GNU_SOURCE
 #include <time.h>
 #include <stdlib.h>
 #include <stdio.h>
@@ -238,8 +237,8 @@
 		tab[i]=j<0 ? 0 : j>255 ? 255 : j;
 	}
 	for (y=0; y<ys; y++) {
-		dp=dbuf+y*pitch;
-		sp=sbuf+y*pitch;
+		dp=(unsigned char *)dbuf+y*pitch;
+		sp=(unsigned char *)sbuf+y*pitch;
 		for (x=0; x<xs; x+=4) {
 			*dp++=tab[*sp++]; *dp++=tab[*sp++]; *dp++=tab[*sp++]; *dp++=tab[*sp++];
 		}
@@ -463,9 +462,9 @@
 		}
 		gounter=0;
 		if (!effu) desing(ovl->pixels[0], ovl->pitches[0], 320, 240, /*module->sngpos+fmod(*/ timex*(1./1000/60*125/16*6/6.5) /*, 1)*/);
-		if (effu&1) rend(ovl->pixels[0], ovl->pitches[0], 320, 224, tsot, 5);
+		if (effu&1) rend((char *)ovl->pixels[0], ovl->pitches[0], 320, 224, tsot, 5);
 //    rend(ovl->pixels[0], ovl->pitches[0], 320, 240, tsot, 3);
-		if (effu&2) getframe(ovl->pixels[0], ovl->pitches[0], mov, 320, 240, timex*8);
+		if (effu&2) getframe((char *)ovl->pixels[0], ovl->pitches[0], mov, 320, 240, timex*8);
 		if (effu&4) {
 			short buf[64000], *s;
 			int x, y;
@@ -474,7 +473,7 @@
 			teesumu(buf, timex*.03);
 			for (x=0; x<1024; x++) tab[x]=sqrt(x*63.9);
 			for (y=0; y<360; y++) {
-				d=ovl->pixels[0]+y*ovl->pitches[0];
+				d=(char *)ovl->pixels[0]+y*ovl->pitches[0];
 				s=buf+(y>>1)*160;
 				for (x=0; x<160; x++, s++) {
 					int c=*s>>4;
--- a/desing.c
+++ b/desing.c
@@ -231,18 +231,18 @@
 
 
 	switch (xrand(6, phi)) {
-	case 0: rend(buf, pitch, xs, ys, tsot, 5); break;
-	case 5: rend(buf, pitch, xs, ys, tsot, 5); break;
-	case 1: getframe(buf, pitch, mov, xs, ys, phi*16384*2); break;
-	case 2: duunaa_sumu(buf, pitch, xs, ys, phi*(256+phi)); break;
-	case 3: duunaa_sumu(buf, pitch, xs, ys, phi*(386+phi*1.5)); break;
+	case 0: rend((char *)buf, pitch, xs, ys, tsot, 5); break;
+	case 5: rend((char *)buf, pitch, xs, ys, tsot, 5); break;
+	case 1: getframe((char *)buf, pitch, mov, xs, ys, phi*16384*2); break;
+	case 2: duunaa_sumu((char *)buf, pitch, xs, ys, phi*(256+phi)); break;
+	case 3: duunaa_sumu((char *)buf, pitch, xs, ys, phi*(386+phi*1.5)); break;
 	case 4: {
 		unsigned char *buf2=malloc(pitch*ys), *d=buf, *s=buf2;
 		if (xrand(2, phi)==0)
-			duunaa_sumu(buf, pitch, xs, ys, phi*1.5*(512-phi*2.5));
+			duunaa_sumu((char *)buf, pitch, xs, ys, phi*1.5*(512-phi*2.5));
 		else
-			getframe(buf, pitch, mov, xs, ys, phi*16384*2);
-		duunaa_sumu(buf2, pitch, xs, ys, phi*(512-phi*2.5));
+			getframe((char *)buf, pitch, mov, xs, ys, phi*16384*2);
+		duunaa_sumu((unsigned char *)buf2, pitch, xs, ys, phi*(512-phi*2.5));
 		for (; d<buf+ys*pitch; s+=4, d+=4) d[0]=d[0]*s[0]>>8,d[1]=d[1]*s[1]>>8,d[2]=d[2]*s[2]>>8,d[3]=d[3]*s[3]>>8;
 		free(buf2);
 	} break;
@@ -263,19 +263,16 @@
 	case 2: foofoo(buf, pitch, xs, ys, 32+32*sin(phi*0.5) ); break;
 	}
 	if(xrand(10,phi)<2) {
-		duunaa_kirkkovene(buf, buf, pitch, xs, ys, -kont, bri+1, .1, 0, 0);
+		duunaa_kirkkovene((char *)buf, (char *)buf, pitch, xs, ys, -kont, bri+1, .1, 0, 0);
 	} else {
-		duunaa_kirkkovene(buf, buf, pitch, xs, ys, kont, bri, .1, 0, 0);
+		duunaa_kirkkovene((char *)buf,(char *) buf, pitch, xs, ys, kont, bri, .1, 0, 0);
 	}
 //  duunaa_kirkkovene(buf, buf, pitch, xs, ys, kont*sin(1-fmod(phi*4,1)), bri*sin(1-fmod(phi*4,1)), .1, 0, 0);
 //  duunaa_kirkkovene(buf, buf, pitch, xs, ys, kont, bri, .1, 0, 0);
 //  foofoo(buf, pitch, xs, ys, 128+128*sin(1-fmod(phi*0.25,1)) );
 //  glaah(buf, pitch, xs, ys, 128+128*sin(1-fmod(phi*0.25,1)) );
 
-	duunaa_kirkkovene(buf, buf, pitch, xs, ys, 1, 0, 7, 0, 0);
+	duunaa_kirkkovene((char *)buf, (char *)buf, pitch, xs, ys, 1, 0, 7, 0, 0);
 
 }
 
-
-
-
