Description: migrate to openmpt
 Migrate to use libopenmpt, so we can compile to more architectures
Author: Nicolas HOUDELOT <nicolas@demosdebs.org>
Applied-Upstream: no
Last-Update: 2024-05-05
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/src/Makefile
+++ b/src/Makefile
@@ -32,7 +32,7 @@
 
 TARGET = fiathomo-by-traction
 LDFLAGS += -lm
-CFLAGS += -Wall -pipe -DWINDOW_WIDTH=$(WINDOW_WIDTH) -DWINDOW_HEIGHT=$(WINDOW_HEIGHT) -fpermissive
+CFLAGS += -Wall -pipe -DWINDOW_WIDTH=$(WINDOW_WIDTH) -DWINDOW_HEIGHT=$(WINDOW_HEIGHT) -fpermissive -std=c++17
 
 ifeq ($(FULLSCREEN),TRUE)
 CFLAGS += -DFULLSCREEN
@@ -40,8 +40,8 @@
 
 #linux Makefile setup
 ifeq ($(PLATFORM), LINUX)
-LDFLAGS += $(shell $(PKG_CONFIG) gl glu sdl2 fmodex --libs)
-CFLAGS += $(shell $(PKG_CONFIG) gl glu sdl2 fmodex --cflags)
+LDFLAGS += $(shell $(PKG_CONFIG) gl glu sdl2 libopenmpt --libs)
+CFLAGS += $(shell $(PKG_CONFIG) gl glu sdl2 libopenmpt --cflags)
 endif
 
 #windows Makefile setup
--- a/src/sound.cpp
+++ b/src/sound.cpp
@@ -5,11 +5,6 @@
 #include "sound.hpp"
 
 #include "resource.h"
-#include <fmodex/fmod.h>
-
-FMOD_SYSTEM *system;
-FMOD_SOUND *fsound;
-FMOD_CHANNEL *channel;
 
 Sound::Sound()
 {
@@ -24,22 +19,61 @@
 
 bool Sound::init()
 {	
-	fsound = 0;
-	FMOD_System_Create(&system);
-	FMOD_System_Init(system, 1, FMOD_INIT_NORMAL, NULL);
-	FMOD_System_CreateSound(system, "/usr/share/fiathomo-by-traction/music.xm", FMOD_SOFTWARE | FMOD_CREATESTREAM, 0, &fsound);
-		
-	return true;
+	/* Initialisation of SDL */
+    if (SDL_Init(SDL_INIT_AUDIO) < 0) {
+            std::cout << "SDL_INIT_AUDIO fail" << std::endl;
+            return false;
+    }
+    SDL_zero(spec);
+    spec.freq = 48000;
+    spec.format = AUDIO_F32SYS;
+    spec.channels = 2;
+    spec.samples = 1024;
+    spec.callback = nullptr;
+
+    device = SDL_OpenAudioDevice(nullptr, 0, &spec, nullptr, 0);
+    if (device == 0) {
+        std::cout << "SDL device not found " << std::endl;
+        return false;
+    }
+
+    /* Loading Module */
+    std::ifstream file("/usr/share/fiathomo-by-traction/music.xm", std::ios::binary );
+    if (!file.is_open()) {
+        std::cout << "couldn't find music.xm" << std::endl;
+        return false;
+    }
+    mod = new openmpt::module(file);
+
+    return true; // Initialization successful
 }
 
 void Sound::play()
 {
-	FMOD_System_PlaySound(system, FMOD_CHANNEL_FREE, fsound, 0, &channel);
+	const int numChannels = 2; // Stereo
+    const int bufferSize = 4096; // Number of frames per channel
+    float* audioBuffer = new float[bufferSize * numChannels];
+
+    mod->set_position_seconds(0); // Ensure song starts from the beginning
+    mod->set_repeat_count(0); // Set repeat count to 0 for playing once
+
+    int framesRead;
+    do {
+        framesRead = mod->read_interleaved_stereo(48000, bufferSize, audioBuffer);
+        if (framesRead > 0) {
+            SDL_QueueAudio(device, audioBuffer, framesRead * numChannels * sizeof(float));
+        }        
+    } while (framesRead > 0);
+    SDL_PauseAudioDevice(device, 0);
 }
 
 void Sound::release()
 {
-	FMOD_Sound_Release(fsound);
-	FMOD_System_Close(system);
-	FMOD_System_Release(system);
+	if (mod != nullptr) {
+        delete mod;
+        mod = nullptr;
+    }
+    if (device != 0) {
+            SDL_CloseAudioDevice(device);
+    }
 }
--- a/src/sound.hpp
+++ b/src/sound.hpp
@@ -1,6 +1,10 @@
 #ifndef _SOUND_HPP_
 #define _SOUND_HPP_
 
+#include <fstream>
+#include <libopenmpt/libopenmpt.hpp>
+#include <SDL2/SDL.h>
+
 /*#include "minifmod/minifmod.h"
 
 extern FMUSIC_MODULE *mod;
@@ -22,6 +26,11 @@
 		bool init();
 		void play();
 		void release();
+		openmpt::module *mod = nullptr;
+		SDL_AudioSpec spec;
+		SDL_AudioDeviceID device;
+
+
 
 	private:
 };
