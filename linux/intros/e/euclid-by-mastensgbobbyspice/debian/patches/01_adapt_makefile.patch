Description: updating makefile
 updating makefile to make it more compatible with packaging
Author: Nicolas HOUDELOT <nicolas@demosdebs.org>
Applied-Upstream: no
Last-Update: 2020-04-27
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/configure.ac
+++ b/configure.ac
@@ -1,9 +1,56 @@
-AC_INIT(euclid, 1.0.3)
-AM_INIT_AUTOMAKE([-Wall -Werror foreign])
+AC_PREREQ([2.69])
+AC_INIT(euclid-by-mastensgbobbyspice, 1.0.3)
+# Detect the canonical host and target build environment
+AC_CANONICAL_BUILD
+AC_CANONICAL_HOST
+AC_CANONICAL_TARGET
+AM_INIT_AUTOMAKE([foreign])
 
+# Checks for programs.
 AC_PROG_CC
+
 AM_PROG_CC_C_O
 AC_PROG_INSTALL
 AC_PROG_MAKE_SET
 
-AC_OUTPUT(Makefile)
+# Checks for libraries.
+AC_INCORPORATE_OPENGL([HAVE_OPENGL], [yes])
+AC_INCORPORATE_ALSA([1.0.16], [HAVE_ALSA], [yes])
+AC_INCORPORATE_PKGCONFIG([vorbisfile], [HAVE_VORBISFILE], [yes])
+AC_INCORPORATE_GLUT([HAVE_GLUT], [yes])
+AC_ADD_LIB([-lm])
+
+AC_COMPILE_MODE
+
+AC_ADD_CCFLAG([-Wall])
+AC_ADD_CCFLAG([-pipe])
+#AC_ADD_CCFLAG([-Wextra])
+#AC_ADD_CCFLAG([-pedantic])
+AC_ADD_CCFLAG([-std=c99])
+AC_ADD_CCFLAG([-pthread])
+
+# Checks for header files.
+AC_CHECK_HEADERS([stdint.h stdlib.h sys/time.h])
+
+# Checks for typedefs, structures, and compiler characteristics.
+AC_TYPE_SIZE_T
+AC_TYPE_UINT8_T
+
+# Checks for library functions.
+AC_CHECK_DECLS([malloc])
+AC_CHECK_FUNCS([gettimeofday memset pow putenv strerror])
+
+AC_CONFIG_FILES([Makefile])
+AC_OUTPUT
+
+
+echo "
+Configuration for $PACKAGE_TARNAME $PACKAGE_VERSION:
+    Target system:            $target
+    Enable debug:             $debug
+    Enable optimizations:     $optimizations
+    Compiler flags:           $CFLAGS
+    Linker flags:             $LDFLAGS
+    Libs:                     $LIBS
+    Install prefix:           $prefix
+Type 'make' to build and 'make install' to install $PACKAGE."
--- a/Makefile.am
+++ b/Makefile.am
@@ -1,19 +1,5 @@
-AM_CFLAGS = -Wall -Wextra -pedantic -std=c99
-
-bin_PROGRAMS = euclid
-dist_bin_SCRIPTS = euclid_with_resolution \
-					euclid_1024x768 \
-					euclid_1280x1024 \
-					euclid_1280x720 \
-					euclid_1600x1200 \
-					euclid_1920x1080 \
-					euclid_1920x1200 \
-					euclid_640x360 \
-					euclid_640x480 \
-					euclid_800x600
+bin_PROGRAMS = euclid-by-mastensgbobbyspice
 
 EXTRA_DIST = euclid.ogg euclid.png
 
-euclid_CFLAGS = -Wall -Wextra -pedantic -std=c99 -pthread
-euclid_LDADD = -lm -lGL -lglut -lasound -lvorbisfile
-euclid_SOURCES = main.c audio.c audio.h
+euclid_by_mastensgbobbyspice_SOURCES = main.c audio.c audio.h
--- /dev/null
+++ b/acinclude.m4
@@ -0,0 +1,642 @@
+# If $2 is 'yes', define and make an am_conditional of $1
+# AC_CONDITIONAL_DEFINE([DEFINE_STRING], [TEST_STRING])
+AC_DEFUN([AC_CONDITIONAL_DEFINE],
+[
+  if test "x$2" = "xyes" ; then
+    AC_DEFINE_UNQUOTED([$1], [1], [Conditionally defined])
+  fi
+  AM_CONDITIONAL([$1], [test "x$2" = "xyes"])
+  AC_SUBST([$1], [$2])
+])
+
+# Add a C flag to current CFLAGS if it is not already there.
+# AC_ADD_CCFLAG([FLAG])
+AC_DEFUN([AC_ADD_CCFLAG],
+[
+  CFLAGS_addsave=[$CFLAGS]
+  if test "x$CFLAGS_addsave" != "x" ; then
+    flag=`echo "$1" | sed 's/-/\\\-/g'`
+    if test -z "`echo \"${CFLAGS}\" | grep \"${flag}\"`" ; then
+      CFLAGS="$CFLAGS_addsave $1"
+    fi
+  else
+    CFLAGS="$1"
+  fi
+])
+
+# Add a C++ flag to current CXXFLAGS if it is not already there.
+# AC_ADD_CXXFLAG([FLAG])
+AC_DEFUN([AC_ADD_CXXFLAG],
+[
+  CXXFLAGS_addsave=[$CXXFLAGS]
+  if test "x$CXXFLAGS_addsave" != "x" ; then
+    flag=`echo "$1" | sed 's/-/\\\-/g'`
+    if test -z "`echo \"${CXXFLAGS}\" | grep \"${flag}\"`" ; then
+      CXXFLAGS="$CXXFLAGS_addsave $1"
+    fi
+  else
+    CXXFLAGS="$1"
+  fi
+])
+
+# Add a C preprocessor flag to current CPPFLAGS if it is not already there.
+# AC_ADD_CPPFLAG([FLAG])
+AC_DEFUN([AC_ADD_CPPFLAG],
+[
+  CPPFLAGS_addsave=[$CPPFLAGS]
+  if test "x$CPPFLAGS_addsave" != "x" ; then
+    flag=`echo "$1" | sed 's/-/\\\-/g'`
+    if test -z "`echo \"${CPPFLAGS}\" | grep \"${flag}\"`" ; then
+      CPPFLAGS="$CPPFLAGS_addsave $1"
+    fi
+  else
+    CPPFLAGS="$1"
+  fi
+])
+
+# Add a linker flag to current LDFLAGS if it is not already there.
+# AC_ADD_LDFLAG([FLAG])
+AC_DEFUN([AC_ADD_LDFLAG],
+[
+  LDFLAGS_addsave=[$LDFLAGS]
+  if test "x$LDFLAGS_addsave" != "x" ; then
+    flag=`echo "$1" | sed 's/-/\\\-/g'`
+    if test -z "`echo \"${LDFLAGS}\" | grep \"${flag}\"`" ; then
+      LDFLAGS="$LDFLAGS_addsave $1"
+    fi
+  else
+    LDFLAGS="$1"
+  fi
+])
+
+# Add a lib to current LIBS if it is not already there.
+# AC_ADD_LIB([FLAG])
+AC_DEFUN([AC_ADD_LIB],
+[
+  LIBS_addsave=[$LIBS]
+  if test "x$LIBS_addsave" != "x" ; then
+    flag=`echo "$1" | sed 's/-/\\\-/g'`
+    if test -z "`echo \"${LIBS}\" | grep \"${flag}\"`" ; then
+      LIBS="$LIBS_addsave $1"
+    fi
+  else
+    LIBS="$1"
+  fi
+])
+
+# Check for CC compiler and preserve existing flags (or their absence).
+# Use as you would use AC_PROG_CC.
+# AC_CHECK_COMPILERS([compilers])
+AC_DEFUN([AC_CHECK_CC],
+[
+  : ${CFLAGS=""}
+  AC_PROG_CC([$1])
+])
+
+# As AC_CHECK_CC, but require C99 standard.
+# AC_INCORPORATE_C99([compilers])
+AC_DEFUN([AC_CHECK_C99],
+[
+  : ${CFLAGS=""}
+  AC_PROG_CC([$1])
+  AC_PROG_CC_C99([$1])
+])
+
+# Check for CXX compiler and preserve existing flags (or their absence).
+# Use as you would use AC_PROG_CXX.
+# AC_CHECK_COMPILERS([compilers])
+AC_DEFUN([AC_CHECK_CXX],
+[
+  : ${CXXFLAGS=""}
+  AC_PROG_CXX([$1])
+])
+
+# Check if given C compiler flag is approperiate and include if yes.
+# AC_CHECK_CCFLAG([FLAG])
+AC_DEFUN([AC_CHECK_CCFLAG],
+[
+  if test "x$CC" != x ; then
+    AC_LANG_PUSH([C])
+    AC_MSG_CHECKING([if $CC accepts $1])
+    CFLAGS_save=[$CFLAGS]
+    AC_ADD_CCFLAG([$1])
+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [])],
+      flag=[yes],
+      flag=[no])
+    if test x$flag = xno ; then
+      CFLAGS="$CFLAGS_save"
+    fi
+    AC_MSG_RESULT([$flag])
+    AC_LANG_POP([C])
+  fi
+])
+
+# Check if given C++ compiler flag is approperiate and include if yes.
+# AC_CHECK_CXXFLAG([flag])
+AC_DEFUN([AC_CHECK_CXXFLAG],
+[
+  if test "x$CXX" != x ; then
+    AC_LANG_PUSH([C++])
+    AC_MSG_CHECKING([if $CXX accepts $1])
+    CXXFLAGS_save=[$CXXFLAGS]
+    AC_ADD_CXXFLAG([$1])
+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [])],
+      flag=[yes],
+      flag=[no])
+    if test x$flag = xno ; then
+      CXXFLAGS="$CXXFLAGS_save"
+    fi
+    AC_MSG_RESULT([$flag])
+    AC_LANG_POP([C++])
+  fi
+])
+
+# Check if given C++ compiler flag produces runnable code.
+# AC_CHECK_CCRUN([FLAG])
+AC_DEFUN([AC_CHECK_CCRUN],
+[
+  AC_LANG_PUSH([C])
+  AC_MSG_CHECKING([if $CC runs $1])
+  CFLAGS_save=[$CFLAGS]
+  AC_ADD_CCFLAG([$1])
+  AC_RUN_IFELSE([AC_LANG_PROGRAM([], [])],
+    flag=[yes],
+    flag=[no],
+    flag=[no])
+  if test x$flag = xno ; then
+    CFLAGS="$CFLAGS_save"
+  fi
+  AC_MSG_RESULT([$flag])
+  AC_LANG_POP([C])
+])
+
+# Check if given C++ compiler flag produces runnable code.
+# AC_CHECK_CXXRUN([FLAG])
+AC_DEFUN([AC_CHECK_CXXRUN],
+[
+  AC_LANG_PUSH([C++])
+  AC_MSG_CHECKING([if $CXX runs $1])
+  CXXFLAGS_save=[$CXXFLAGS]
+  AC_ADD_CXXFLAG([$1])
+  AC_RUN_IFELSE([AC_LANG_PROGRAM([], [])],
+    flag=[yes],
+    flag=[no],
+    flag=[no])
+  if test x$flag = xno ; then
+    CXXFLAGS="$CXXFLAGS_save"
+  fi
+  AC_MSG_RESULT([$flag])
+  AC_LANG_POP([C++])
+])
+
+# Check a flag for both C and C++
+# AC_CHECK_CFLAG([flag])
+AC_DEFUN([AC_CHECK_CFLAG],
+[
+  AC_CHECK_CCFLAG([$1])
+  AC_CHECK_CXXFLAG([$1])
+])
+
+# Check a run flag for both C and C++
+# AC_CHECK_CRUN([flag])
+AC_DEFUN([AC_CHECK_CRUN],
+[
+  AC_CHECK_CCRUN([$1])
+  AC_CHECK_CXXRUN([$1])
+])
+
+# Check if given linker flag is approperiate and include if yes.
+# AC_CHECK_LDFLAG([FLAG])
+AC_DEFUN([AC_CHECK_LDFLAG],
+[
+  AC_MSG_CHECKING([if linker accepts $1])
+  LDFLAGS_save=[$LDFLAGS]
+  AC_ADD_LDFLAG([$1])
+  AC_LINK_IFELSE([AC_LANG_PROGRAM([], [])],
+    flag=[yes],
+    flag=[no])
+  if test x$flag = xno ; then
+    LDFLAGS=[$LDFLAGS_save]
+  fi
+  AC_MSG_RESULT([$flag])
+])
+
+# Check for a given directory. If found, append it to the directories
+# specified for the compiler headers.
+# AC_CHECK_HEADER_DIRECTORY([DIRECTORY], [ASSUME_SYSTEM_DIRECTORY])
+AC_DEFUN([AC_CHECK_HEADER_DIRECTORY],
+[
+  AC_MSG_CHECKING([for include directory $1])
+  if test -d "$1" ; then
+    if test "x$2" = "xyes" ; then
+      AC_ADD_CPPFLAG([-isystem $1])
+    else
+      AC_ADD_CPPFLAG([-I$1])
+    fi
+    AC_MSG_RESULT([yes])
+  else
+    AC_MSG_RESULT([no])
+  fi
+])
+
+# Check for a given directory. If found, append it to the directories
+# specified for the linker library search paths.
+# AC_CHECK_LIBRARY_DIRECTORY([DIRECTORY])
+AC_DEFUN([AC_CHECK_LIBRARY_DIRECTORY],
+[
+  AC_MSG_CHECKING([for library directory $1])
+  if test -d "$1" ; then
+    AC_ADD_LDFLAG([-L$1])
+    AC_MSG_RESULT([yes])
+  else
+    AC_MSG_RESULT([no])
+  fi
+])
+
+# Enables or disables selected compiler flags.
+# Compilers CC and CXX, if needed, need to be probed prior to entry.
+# If parameter given, use it as additional linker flags probed regardless
+# of compilation mode. Use this if some features are hard or impossible to
+# test normally.
+# AC_DEBUG_MODE([EXTRA_LINKER_FLAGS])
+AC_DEFUN([AC_COMPILE_MODE],
+[
+  AC_MSG_CHECKING([for compilation mode])
+  AC_ARG_ENABLE(
+    debug,
+    AS_HELP_STRING(
+      [--enable-debug],
+      [Compile with additional debugging information and functions]),
+    debug=[yes],
+    debug=[no])
+  AC_ARG_ENABLE(
+    optimizations,
+    AS_HELP_STRING(
+      [--disable-optimizations],
+      [Do not try to compile with aggressive optimizations]),
+    optimizations=[no],
+    optimizations=[yes])
+
+  if test "x$debug" = "xyes" ; then
+    optimizations=[no]
+    ndebug=[no]
+  else
+    ndebug=[yes]
+  fi
+
+  AC_CONDITIONAL_DEFINE([DEBUG], [$debug])
+  AC_CONDITIONAL_DEFINE([NDEBUG], [$ndebug])
+
+  # Clang needs these to not clutter everything.
+  AC_CHECK_CFLAG([-Werror=unused-command-line-argument])
+  AC_CHECK_CFLAG([-Werror=unknown-warning-option])
+
+  if test "x$debug" != "xno" ; then
+    AC_MSG_RESULT([debug])
+    AC_CHECK_CFLAG([-O0])
+    AC_CHECK_CFLAG([-g])
+    AC_CHECK_CFLAG([-funit-at-a-time])
+    AC_CHECK_CXXFLAG([-Wold-style-cast]) # Creates clutter otherwise.
+  elif test "x$optimizations" != "xno" ; then
+    AC_MSG_RESULT([optimized])
+    AC_CHECK_CFLAG([-O3])
+    AC_CHECK_CFLAG([-ffast-math])
+    # AC_CHECK_CFLAG([-fcx-limited-range]) # begin -ffast-math
+    # AC_CHECK_CFLAG([-ffinite-math-only])
+    # AC_CHECK_CFLAG([-fno-math-errno])
+    # AC_CHECK_CFLAG([-fno-rounding-math])
+    # AC_CHECK_CFLAG([-fno-signaling-nans])
+    # AC_CHECK_CFLAG([-fno-trapping-math])
+    # AC_CHECK_CFLAG([-funsafe-math-optimizations]) # may break something
+    AC_CHECK_CFLAG([-flto])
+    AC_CHECK_LDFLAG([-flto])
+  else
+    AC_MSG_RESULT([normal])
+    AC_CHECK_CFLAG([-O2])
+  fi
+  if test "x$debug" = "xno" ; then
+    AC_CHECK_CFLAG([-fomit-frame-pointer])
+    AC_CHECK_LDFLAG([-s])
+  fi
+
+  AC_CHECK_CFLAG([-ftracer])
+  AC_CHECK_CFLAG([-fweb])
+  AC_CHECK_CFLAG([-pipe])
+  AC_CHECK_CFLAG([-Werror=return-type])
+  AC_CHECK_CCFLAG([-Werror-implicit-function-declaration])
+
+  if test "x$1" != "x" ; then
+    AC_CHECK_LDFLAG([$1])
+  fi
+])
+
+# Create a specific configuration file accepting only certain types of
+# flags.
+# AC_SPECIFIC_HEADER([TEMPORARY_CONFIG_FILE_NAME], [FINAL_CONFIG_FILE_NAME], [CONFIGURATION_TERM_PREFIX])
+AC_DEFUN([AC_SPECIFIC_HEADER],
+[
+  AC_CONFIG_COMMANDS([specific header],  [cat $1 | grep $3 > $2])
+  AC_CONFIG_HEADERS([$1])
+])
+
+# Check for 32/64 -bit memory space.
+# AC_CHECK_POINTER_SIZE([DEFINE_IF_32], [DEFINE_IF_64])
+AC_DEFUN([AC_CHECK_POINTER_SIZE],
+[
+  AC_MSG_CHECKING([if pointer size is 32 bits])
+  AC_RUN_IFELSE(
+    [int main(void)
+    {
+      if(sizeof(void*) = 4)
+      {
+        return 0;
+      }
+      return 1;
+    }],
+    [acptrsize32bit=yes],
+    [acptrsize32bit=no],
+    [acptrsize32bit=no])
+  if test x$acptrsize32bit = xyes ; then
+    AC_MSG_RESULT([yes])
+  else
+    AC_MSG_RESULT([no])
+  fi
+  AC_CONDITIONAL_DEFINE([$2], [$acptrsize32bit])
+  AC_MSG_CHECKING([if pointer size is 64 bits])
+  AC_RUN_IFELSE(
+    [int main(void)
+    {
+      if(sizeof(void*) = 8)
+      {
+        return 0;
+      }
+      return 1;
+    }],
+    [acptrsize64bit=yes],
+    [acptrsize64bit=no],
+    [acptrsize64bit=no])
+  if test x$acptrsize64bit = xyes ; then
+    AC_MSG_RESULT([yes])
+  else
+    AC_MSG_RESULT([no])
+  fi
+  AC_CONDITIONAL_DEFINE([$2], [$acptrsize64bit])
+])
+
+# Incorporation.
+# AC_INCORPORATE([name], [yesno], [cflags], [libs], [define], [obligatory])
+AC_DEFUN([AC_INCORPORATE],
+[
+  AC_MSG_CHECKING([if $1 is ok])
+  if test "x$2" = xyes ; then
+    AC_ADD_CCFLAG([$3])
+    AC_ADD_CXXFLAG([$3])
+    AC_ADD_LIB([$4])
+    AC_MSG_RESULT([yes])
+  elif test "x$6" = "xyes" ; then
+    AC_MSG_ERROR([no])
+  else
+    AC_MSG_RESULT([no])
+  fi
+
+  if test -n $5 ; then
+    AC_CONDITIONAL_DEFINE([$5], [$2])
+  fi
+])
+
+# Incorporation through pkg-config.
+# AC_INCORPORATE_PKGCONFIG([name], [define on found], [obligatory])
+AC_DEFUN([AC_INCORPORATE_PKGCONFIG],
+[
+  PKG_CHECK_MODULES([$1],
+    [$1],
+    pkgc=[yes],
+    pkgc=[no])
+  AC_INCORPORATE([$1], [$pkgc], $[$1[]_CFLAGS], $[$1[]_LIBS], $3, $4)
+])
+
+# Incorporate basic Boost headers.
+# AC_INCORPORATE_BOOST_ELEMENTARY([define on found], [obligatory])
+AC_DEFUN([AC_INCORPORATE_BOOST_ELEMENTARY],
+[
+  AC_LANG_PUSH([C++])
+  AC_CHECK_HEADER([boost/foreach.hpp])
+  AC_CHECK_HEADER([boost/throw_exception.hpp])
+  AC_CHECK_HEADER([boost/tuple/tuple.hpp])
+  if test "x$ac_cv_header_boost_foreach_hpp$ac_cv_header_boost_throw_exception_hpp$ac_cv_header_boost_tuple_tuple_hpp" != "xyesyesyes" ; then
+    boost_elementary=[no]
+  else
+    boost_elementary=[yes]
+  fi
+  AC_INCORPORATE([boost_elementary_headers], [$boost_elementary], [], [], [$1], [$2])
+  AC_LANG_POP([C++])
+])
+
+# Incorporate Boost filesystem.
+# AC_INCORPORATE_BOOST_FILESYSTEM([define on found], [obligatory])
+AC_DEFUN([AC_INCORPORATE_BOOST_FILESYSTEM],
+[
+  AC_LANG_PUSH([C++])
+  AC_CHECK_HEADER([boost/filesystem.hpp])
+  AC_CHECK_LIB([boost_filesystem], [main])
+  AC_INCORPORATE([boost_filesystem], [$ac_cv_lib_boost_filesystem_main], [], [], [$1], [$2])
+  AC_LANG_POP([C++])
+])
+
+# Incorporate Boost program options.
+# AC_INCORPORATE_BOOST_PROGRAM_OPTIONS([define on found], [obligatory])
+AC_DEFUN([AC_INCORPORATE_BOOST_PROGRAM_OPTIONS],
+[
+  AC_LANG_PUSH([C++])
+  AC_CHECK_HEADER([boost/program_options.hpp])
+  AC_CHECK_LIB([boost_program_options], [main])
+  if test "x$ac_cv_header_boost_program_options_hpp$ac_cv_lib_boost_program_options_main" != "xyesyes" ; then
+    boost_program_options=[no]
+  else
+    boost_program_options=[yes]
+  fi
+  AC_INCORPORATE([boost_program_options], [$boost_program_options], [], [], [$1], [$2])
+  AC_LANG_POP([C++])
+])
+
+# Incorporate Boost property tree.
+# AC_INCORPORATE_BOOST_PROPERTY_TREE([define on found], [obligatory])
+AC_DEFUN([AC_INCORPORATE_BOOST_PROPERTY_TREE],
+[
+  AC_LANG_PUSH([C++])
+  AC_CHECK_HEADER([boost/property_tree/ptree.hpp])
+  AC_CHECK_HEADER([boost/property_tree/xml_parser.hpp])
+  if test "x$ac_cv_header_boost_property_tree_ptree_hpp$ac_cv_header_boost_property_tree_xml_parser_hpp" != "xyesyes" ; then
+    boost_property_tree=[no]
+  else
+    boost_property_tree=[yes]
+  fi
+  AC_INCORPORATE([boost_property_tree], [$boost_property_tree], [], [], [$1], [$2])
+  AC_LANG_POP([C++])
+])
+
+# Incorporate Boost signals.
+# AC_INCORPORATE_BOOST_SIGNAL([define on found], [obligatory])
+AC_DEFUN([AC_INCORPORATE_BOOST_SIGNALS],
+[
+  AC_LANG_PUSH([C++])
+  AC_CHECK_HEADER([boost/signals.hpp])
+  AC_CHECK_LIB([boost_signals], [main])
+  AC_INCORPORATE([boost_signals], [$ac_cv_lib_boost_signals_main], [], [], [$1], [$2])
+  AC_LANG_POP([C++])
+])
+
+# Incorporate Boost filesystem.
+# AC_INCORPORATE_BOOST_SYSTEM([define on found], [obligatory])
+AC_DEFUN([AC_INCORPORATE_BOOST_SYSTEM],
+[
+  AC_LANG_PUSH([C++])
+  AC_CHECK_LIB([boost_system], [main])
+  AC_INCORPORATE([boost_system], [$ac_cv_lib_boost_system_main], [], [], [$1], [$2])
+  AC_LANG_POP([C++])
+])
+
+# Incorporate Boost threading.
+# AC_INCORPORATE_BOOST_THREAD([define on found], [obligatory])
+AC_DEFUN([AC_INCORPORATE_BOOST_THREAD],
+[
+  AC_LANG_PUSH([C++])
+  AC_CHECK_HEADER([boost/thread.hpp])
+  AC_CHECK_LIB([boost_thread-mt], [main])
+  boost_thread=[$ac_cv_lib_boost_thread_mt_main]
+  if test "x$boost_thread" != "xyes" ; then
+    AC_CHECK_LIB([boost_thread-mt], [thread_proxy])
+    boost_thread=[$ac_cv_lib_boost_thread_mt_thread_proxy]
+    if test "x$boost_thread" != "xyes" ; then
+      AC_CHECK_LIB([boost_thread], [main])
+      boost_thread=[$ac_cv_lib_boost_thread_main]
+      if test "x$boost_thread" != "xyes" ; then
+        AC_CHECK_LIB([boost_thread], [thread_proxy])
+        boost_thread=[$ac_cv_lib_boost_thread_thread_proxy]
+      fi
+    fi
+  fi
+  AC_INCORPORATE([boost_thread], [$boost_thread], [], [], [$1], [$2])
+  AC_LANG_POP([C++])
+])
+
+# Incorporate Boost unit test framework
+# AC_INCORPORATE_BOOST_UNIT_TEST_FRAMEWORK([define on found], [obligatory])
+AC_DEFUN([AC_INCORPORATE_BOOST_UNIT_TEST_FRAMEWORK],
+[
+  AC_LANG_PUSH([C++])
+  boost_unit_test_framework=[yes]
+  AC_CHECK_LIB([boost_unit_test_framework], [main])
+  if test "x$ac_cv_lib_boost_unit_test_framework_main" != "xyes" ; then
+    AC_CHECK_LIB([boost_unit_test_framework-mt], [main])
+    if test "x$ac_cv_lib_boost_unit_test_framework_main-mt" != "xyes" ; then
+      AC_CHECK_LIB([boost_unit_test_framework-st], [main])
+      boost_unit_test_framework=[$ac_cv_lib_boost_unit_test_framework_main-st]
+    fi
+  fi
+  AC_MSG_CHECKING([if Boost unit test framework is ok])
+  if test "x$boost_unit_test_framework" = xyes ; then
+    AC_MSG_RESULT([yes])
+    AC_CONDITIONAL_DEFINE([$1], [yes])
+    AC_CHECK_CFLAG([-DBOOST_TEST_DYN_LINK])
+  elif test "x$2" = "xyes" ; then
+    AC_MSG_ERROR([no])
+    AC_CONDITIONAL_DEFINE([$1], [no])
+  else
+    AC_MSG_RESULT([no])
+    AC_CONDITIONAL_DEFINE([$1], [no])
+  fi
+  AC_LANG_POP([C++])
+])
+
+# Incorporate Freetype2.
+# AC_INCORPORATE_FREETYPE2([version], [define on found], [obligatory])
+AC_DEFUN([AC_INCORPORATE_FREETYPE2],
+[
+  AC_CHECK_FT2([$1],
+    freetype2=[yes],
+    freetype2=[no])
+  AC_INCORPORATE([Freetype2], [$freetype2], [$FT2_CFLAGS], [$FT2_LIBS], [$2], [$3])
+])
+
+# Incorporate GLUT.
+# AC_INCORPORATE_GLUT([define on found], [obligatory])
+AC_DEFUN([AC_INCORPORATE_GLUT],
+[
+  AC_LANG_PUSH([C])
+  AC_CHECK_LIB([glut], [glutInit])
+  AC_INCORPORATE([GLUT], [$ac_cv_lib_glut_glutInit], [], [], [$1], [$2])
+  AC_LANG_POP([C])
+])
+
+
+# Incorporate libjpeg.
+# AC_INCORPORATE_LIBJPEG([version], [define on found], [obligatory])
+AC_DEFUN([AC_INCORPORATE_LIBJPEG],
+[
+  AC_LANG_PUSH([C])
+  AC_CHECK_LIB([jpeg], [jpeg_stdio_src])
+  AC_INCORPORATE([jpeg], [$ac_cv_lib_jpeg_jpeg_stdio_src], [], [], [$1], [$2])
+  AC_LANG_POP([C])
+])
+
+# Incorporate OpenGL.
+# This means both libGL and libGLU.
+# AC_INCORPORATE_OPENGL([define on found], [obligatory])
+AC_DEFUN([AC_INCORPORATE_OPENGL],
+[
+  AC_LANG_PUSH([C])
+  AC_CHECK_LIB([GL], [glFrustum])
+  AC_CHECK_LIB([GLU], [gluPerspective])
+  AC_MSG_CHECKING([if OpenGL is ok])
+  if test "x$ac_cv_lib_GL_glFrustum$ac_cv_lib_GLU_gluPerspective" = "xyesyes" ; then
+    AC_MSG_RESULT([yes])
+    AC_CONDITIONAL_DEFINE([$1], [yes])
+  elif test "x$2" = "xyes" ; then
+    AC_MSG_ERROR([no])
+    AC_CONDITIONAL_DEFINE([$1], [no])
+  else
+    AC_MSG_RESULT([no])
+    AC_CONDITIONAL_DEFINE([$1], [no])
+  fi
+  AC_LANG_POP([C])
+])
+
+# Incorporate SDL.
+# AC_INCORPORATE_SDL([version], [define on found], [obligatory])
+AC_DEFUN([AC_INCORPORATE_SDL],
+[
+  AM_PATH_SDL([$1],
+    sdl=[yes],
+    sdl=[no])
+  AC_INCORPORATE([SDL], [$sdl], [$SDL_CFLAGS], [$SDL_LIBS], [$2], [$3])
+])
+
+# Incorporate LIBMIKMOD.
+# AC_INCORPORATE_LIBMIKMOD([version], [define on found], [obligatory])
+AC_DEFUN([AC_INCORPORATE_LIBMIKMOD],
+[
+  AM_PATH_LIBMIKMOD([$1],
+    libmikmod=[yes],
+    libmikmod=[no])
+  AC_INCORPORATE([LIBMIKMOD], [$libmikmod], [$LIBMIKMOD_CFLAGS], [$LIBMIKMOD_LIBS], [$2], [$3])
+])
+
+# Incorporate Vorbis.
+# AC_INCORPORATE_VORBIS([define on found], [obligatory])
+AC_DEFUN([AC_INCORPORATE_VORBIS],
+[
+  XIPH_PATH_VORBIS(have_ogg=[yes],
+    have_ogg=[no])
+  AC_INCORPORATE([VORBIS], [$have_ogg], [$VORBIS_CFLAGS], [$VORBIS_LIBS], [$1], [$2])
+])
+
+# Incorporate ALSA.
+# AC_INCORPORATE_ALSA([version], [define on found], [obligatory])
+AC_DEFUN([AC_INCORPORATE_ALSA],
+[
+  AM_PATH_ALSA([$1],
+    alsa=[yes],
+    alsa=[no])
+  AC_INCORPORATE([ALSA], [$alsa], [$ALSA_CFLAGS], [$ALSA_LIBS], [$2], [$3])
+])
