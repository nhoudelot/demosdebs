--- a/Makefile
+++ b/Makefile
@@ -1,5 +1,5 @@
-PYUIC = pyuic4
-PYRCC = pyrcc4
+PYUIC = pyuic5
+PYRCC = pyrcc5
 
 UIFILES := $(wildcard ggpo/gui/ui/*.ui)
 UIPYFILES := $(UIFILES:.ui=_ui.py)
--- a/main.py
+++ b/main.py
@@ -12,8 +12,8 @@
 
 sip.setapi('QString', 2)
 sip.setapi('QVariant', 2)
-from PyQt4 import QtGui, QtCore
-QtCore.QTextCodec.setCodecForCStrings(QtCore.QTextCodec.codecForName("utf-8"))
+from PyQt5 import QtGui, QtWidgets, QtCore
+#QtCore.QTextCodec.setCodecForCStrings(QtCore.QTextCodec.codecForName("utf-8"))
 from ggpo.common.controller import Controller
 from ggpo.common.settings import Settings
 from ggpo.gui.colortheme import ColorTheme
@@ -28,8 +28,8 @@
     started = False
 
     # create the application if necessary
-    if not QtGui.QApplication.instance():
-        app = QtGui.QApplication(argv)
+    if not QtWidgets.QApplication.instance():
+        app = QtWidgets.QApplication(argv)
         app.setQuitOnLastWindowClosed(True)
         app.setOrganizationName("FightCade")
         QtCore.QCoreApplication.setApplicationName("FightCade")
--- a/ggpo/common/controller.py
+++ b/ggpo/common/controller.py
@@ -12,7 +12,7 @@
 from shutil import copyfile
 from random import randint
 from subprocess import Popen
-from PyQt4 import QtCore
+from PyQt5 import QtCore
 from ggpo.common.runtime import *
 from ggpo.common.geolookup import geolookup, isUnknownCountryCode
 from ggpo.common.player import Player
--- a/ggpo/common/settings.py
+++ b/ggpo/common/settings.py
@@ -2,7 +2,7 @@
 import pickle
 import os.path
 import sys
-from PyQt4.QtCore import QSettings
+from PyQt5.QtCore import QSettings
 
 
 # noinspection PyClassHasNoInit
--- a/ggpo/common/unsupportedsavestates.py
+++ b/ggpo/common/unsupportedsavestates.py
@@ -7,7 +7,7 @@
 import urllib
 import urllib2
 import time
-from PyQt4 import QtCore
+from PyQt5 import QtCore
 from ggpo.common.util import logdebug, findGamesavesDir, sha256digest
 
 
--- a/ggpo/common/util.py
+++ b/ggpo/common/util.py
@@ -7,7 +7,7 @@
 import sys
 import urllib2
 from collections import defaultdict
-from PyQt4 import QtGui, QtCore
+from PyQt5 import QtGui, QtCore
 from ggpo.common.runtime import *
 from ggpo.common.settings import Settings
 from ggpo.common import copyright
--- a/ggpo/gui/colortheme.py
+++ b/ggpo/gui/colortheme.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 import cgi
-from PyQt4 import QtGui
-from PyQt4.QtCore import QFile, QIODevice
+from PyQt5 import QtWidgets
+from PyQt5.QtCore import QFile, QIODevice
 from ggpo.common.settings import Settings
 
 
@@ -75,8 +75,8 @@
 
     @classmethod
     def saveDefaultStyle(cls):
-        cls.originalStyle = QtGui.QApplication.style().objectName()
-        cls.originalPalette = QtGui.QApplication.palette()
+        cls.originalStyle = QtWidgets.QApplication.style().objectName()
+        cls.originalPalette = QtWidgets.QApplication.palette()
 
     @staticmethod
     def setDarkTheme(boolean):
@@ -93,9 +93,9 @@
             except:
                 qss = ''
                 pass
-            QtGui.QApplication.setStyle(ColorTheme.originalStyle)
-            QtGui.QApplication.setPalette(ColorTheme.originalPalette)
-            QtGui.QApplication.instance().setStyleSheet(qss)
+            QtWidgets.QApplication.setStyle(ColorTheme.originalStyle)
+            QtWidgets.QApplication.setPalette(ColorTheme.originalPalette)
+            QtWidgets.QApplication.instance().setStyleSheet(qss)
 
     @staticmethod
     def setGNGTheme(boolean):
@@ -112,18 +112,18 @@
             except:
                 qss = ''
                 pass
-            QtGui.QApplication.setStyle(ColorTheme.originalStyle)
-            QtGui.QApplication.setPalette(ColorTheme.originalPalette)
-            QtGui.QApplication.instance().setStyleSheet(qss)
+            QtWidgets.QApplication.setStyle(ColorTheme.originalStyle)
+            QtWidgets.QApplication.setPalette(ColorTheme.originalPalette)
+            QtWidgets.QApplication.instance().setStyleSheet(qss)
 
     @staticmethod
     def setNormalTheme(boolean):
         if boolean:
             ColorTheme.SELECTED = ColorTheme.LIGHT
-            QtGui.QApplication.setStyle(ColorTheme.originalStyle)
-            QtGui.QApplication.setPalette(ColorTheme.originalPalette)
+            QtWidgets.QApplication.setStyle(ColorTheme.originalStyle)
+            QtWidgets.QApplication.setPalette(ColorTheme.originalPalette)
             Settings.setValue(Settings.COLORTHEME, '')
-            QtGui.QApplication.instance().setStyleSheet('')
+            QtWidgets.QApplication.instance().setStyleSheet('')
 
     @staticmethod
     def statusHtml(txt):
--- a/ggpo/gui/completionlineedit.py
+++ b/ggpo/gui/completionlineedit.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
-from PyQt4.QtCore import Qt, QAbstractItemModel, QModelIndex, QEvent
-from PyQt4.QtGui import QLineEdit, QCompleter
+from PyQt5.QtCore import Qt, QAbstractItemModel, QModelIndex, QEvent
+from PyQt5.QtWidgets import QLineEdit, QCompleter
 from ggpo.common.cliclient import CLI
 from ggpo.common.playerstate import PlayerStates
 
--- a/ggpo/gui/customemoticonsdialog.py
+++ b/ggpo/gui/customemoticonsdialog.py
@@ -1,10 +1,10 @@
 # -*- coding: utf-8 -*-
-from PyQt4 import QtCore, QtGui
+from PyQt5 import QtCore, QtWidgets
 from ggpo.common.settings import Settings
 from ggpo.gui.ui.customemoticonsdialog_ui import Ui_EmoticonDialog
 
 
-class CustomEmoticonsDialog(QtGui.QDialog, Ui_EmoticonDialog):
+class CustomEmoticonsDialog(QtWidgets.QDialog, Ui_EmoticonDialog):
     def __init__(self, *args, **kwargs):
         super(CustomEmoticonsDialog, self).__init__(*args, **kwargs)
         self.setupUi(self)
@@ -19,4 +19,4 @@
             saved = "\n".join(filter(None, [line.strip()
                                             for line in customEmoticons.split("\n")
                                             if 0 < len(line) < 64]))
-            Settings.setValue(Settings.CUSTOM_EMOTICONS, saved)
\ No newline at end of file
+            Settings.setValue(Settings.CUSTOM_EMOTICONS, saved)
--- a/ggpo/gui/emoticonsdialog.py
+++ b/ggpo/gui/emoticonsdialog.py
@@ -1,9 +1,9 @@
 # -*- coding: utf-8 -*-
-from PyQt4 import QtCore, QtGui
+from PyQt5 import QtCore, QtWidgets
 from ggpo.common.runtime import *
 from ggpo.common.settings import Settings
 
-class FlowLayout(QtGui.QLayout):
+class FlowLayout(QtWidgets.QLayout):
     def __init__(self, parent=None, margin=10, spacing=-1):
         super(FlowLayout, self).__init__(parent)
 
@@ -169,7 +169,7 @@
 ←↙↓↘→↗↑↖'''
 
 
-class EmoticonDialog(QtGui.QDialog):
+class EmoticonDialog(QtWidgets.QDialog):
     def __init__(self, *args, **kwargs):
         super(EmoticonDialog, self).__init__(*args, **kwargs)
         saved = Settings.value(Settings.EMOTICON_DIALOG_GEOMETRY)
--- a/ggpo/gui/ggpowindow.py
+++ b/ggpo/gui/ggpowindow.py
@@ -8,8 +8,8 @@
 import shutil
 import time
 from colortheme import ColorTheme
-from PyQt4 import QtCore, QtGui
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtWidgets
+from PyQt5.QtCore import Qt
 import ggpo.common.sound
 from ggpo.common.geolookup import geolookupInit
 from ggpo.common.runtime import *
@@ -28,7 +28,7 @@
 from ggpo.gui.ui.ggpowindow_ui import Ui_MainWindow
 
 # re-implement the QTreeWidgetItem
-class TreeWidgetItem(QtGui.QTreeWidgetItem):
+class TreeWidgetItem(QtWidgets.QTreeWidgetItem):
     def __lt__(self, other):
         column = self.treeWidget().sortColumn()
         key1 = self.text(column)
@@ -38,7 +38,7 @@
         except ValueError:
             return key1 < key2
 
-class GGPOWindow(QtGui.QMainWindow, Ui_MainWindow):
+class GGPOWindow(QtWidgets.QMainWindow, Ui_MainWindow):
     def __init__(self, QWidget_parent=None):
         super(GGPOWindow, self).__init__(QWidget_parent)
         self.setupUi(self)
@@ -71,18 +71,18 @@
         self.uiChannelsTree.itemDoubleClicked.connect(self.AddRemoveFavorites) # call to double click handler
 
     def aboutDialog(self):
-        QtGui.QMessageBox.information(self, 'About', copyright.about())
+        QtWidgets.QMessageBox.information(self, 'About', copyright.about())
 
     def addSplitterHandleToggleButton(self):
-        self.uiSplitter.setStyle(QtGui.QStyleFactory.create("Cleanlooks"))
+        self.uiSplitter.setStyle(QtWidgets.QStyleFactory.create("Cleanlooks"))
         handle = self.uiSplitter.handle(1)
-        layout = QtGui.QVBoxLayout()
+        layout = QtWidgets.QVBoxLayout()
         layout.setContentsMargins(0, 0, 0, 0)
-        button = QtGui.QToolButton(handle)
+        button = QtWidgets.QToolButton(handle)
         button.setArrowType(QtCore.Qt.LeftArrow)
         button.clicked.connect(self.onToggleSidebarAction)
         layout.addWidget(button)
-        button = QtGui.QToolButton(handle)
+        button = QtWidgets.QToolButton(handle)
         button.setArrowType(QtCore.Qt.RightArrow)
         button.clicked.connect(self.onToggleSidebarAction)
         layout.addWidget(button)
@@ -102,7 +102,7 @@
         return 'ui{}ThemeAct'.format(re.sub(r'[^a-zA-Z0-9]', '', styleName))
 
     def changeFont(self):
-        font, ok = QtGui.QFontDialog.getFont()
+        font, ok = QtWidgets.QFontDialog.getFont()
         if ok:
             Settings.setPythonValue(Settings.CHAT_HISTORY_FONT,
                                     [font.family(), font.pointSize(), font.weight(), font.italic()])
@@ -181,7 +181,7 @@
             dirname = os.path.dirname(oldval)
         else:
             dirname = os.path.expanduser("~")
-        fname = QtGui.QFileDialog.getOpenFileName(self, 'Locate custom wave file', dirname,
+        fname = QtWidgets.QFileDialog.getOpenFileName(self, 'Locate custom wave file', dirname,
                                                   "wav file (*.wav)")
         if fname:
             Settings.setValue(Settings.CUSTOM_CHALLENGE_SOUND_LOCATION, fname)
@@ -197,7 +197,7 @@
         else:
             dirname = os.path.expanduser("~")
 
-        fname = QtGui.QFileDialog.getOpenFileName(self, 'Locate ggpofba-ng.exe', dirname,
+        fname = QtWidgets.QFileDialog.getOpenFileName(self, 'Locate ggpofba-ng.exe', dirname,
                                                   "ggpofba-ng.exe (ggpofba-ng.exe)")
         if fname:
             Settings.setValue(Settings.GGPOFBA_LOCATION, fname)
@@ -209,25 +209,25 @@
             dirname = os.path.dirname(oldval)
         else:
             dirname = os.path.expanduser("~")
-        fname = QtGui.QFileDialog.getOpenFileName(self, 'Locate Geo mmdb file', dirname,
+        fname = QtWidgets.QFileDialog.getOpenFileName(self, 'Locate Geo mmdb file', dirname,
                                                   "Geo mmdb (*.mmdb)")
         if fname:
             Settings.setValue(Settings.GEOIP2DB_LOCATION, fname)
             geolookupInit()
 
     def locateUnsupportedSavestatesDirAct(self):
-        d = QtGui.QFileDialog.getExistingDirectory(self, "Open Directory",
+        d = QtWidgets.QFileDialog.getExistingDirectory(self, "Open Directory",
                                                    os.path.expanduser("~"),
-                                                   QtGui.QFileDialog.ShowDirsOnly
-                                                   | QtGui.QFileDialog.DontResolveSymlinks)
+                                                   QtWidgets.QFileDialog.ShowDirsOnly
+                                                   | QtWidgets.QFileDialog.DontResolveSymlinks)
         if d and os.path.isdir(d):
             Settings.setValue(Settings.UNSUPPORTED_GAMESAVES_DIR, d)
 
     def locateROMsDir(self):
-        d = QtGui.QFileDialog.getExistingDirectory(self, "Open Directory",
+        d = QtWidgets.QFileDialog.getExistingDirectory(self, "Open Directory",
                                                    os.path.expanduser("~"),
-                                                   QtGui.QFileDialog.ShowDirsOnly
-                                                   | QtGui.QFileDialog.DontResolveSymlinks)
+                                                   QtWidgets.QFileDialog.ShowDirsOnly
+                                                   | QtWidgets.QFileDialog.DontResolveSymlinks)
         if d and os.path.isdir(d):
             Settings.setValue(Settings.ROMS_DIR, d)
 
@@ -251,7 +251,7 @@
 
     def onAnchorClicked(self, qurl):
         if qurl.scheme() in ['http', 'https']:
-            QtGui.QDesktopServices.openUrl(qurl)
+            QtWidgets.QDesktopServices.openUrl(qurl)
         name = qurl.path()
         if name:
             if qurl.scheme() == 'accept':
@@ -350,8 +350,8 @@
                 item.setText(0, str(self.controller.channels[chan]['users']))
                 item.setText(1, i)
                 if not self.controller.isRomAvailable(chan) and chan!='lobby':
-                    item.setTextColor(0, QtGui.QColor(60, 60, 60))
-                    item.setTextColor(1, QtGui.QColor(60, 60, 60))
+                    item.setForeground(0, QtGui.QColor(60, 60, 60))
+                    item.setForeground(1, QtGui.QColor(60, 60, 60))
                 if "," + self.channels[i] + "," in self.favorites:
                     bold_font = QtGui.QFont()
                     bold_font.setBold(True)
@@ -384,8 +384,10 @@
             # end column sorting #
 
             if lastChannel in self.controller.channels:
-                self.uiChannelsTree.setItemSelected(root.child(0), False)
-                self.uiChannelsTree.setItemSelected(root.child(idx), True)
+                #self.uiChannelsTree.setItemSelected(root.child(0), False)
+                root.child(0).setSelected(False)
+                #self.uiChannelsTree.setItemSelected(root.child(idx), True)
+                root.child(idx).setSelected(True)
                 self.uiChannelsTree.scrollToItem(root.child(idx)) # scroll lobby list to last channel
                 if self.controller.channel != lastChannel:
                     self.controller.sendJoinChannelRequest(lastChannel)
@@ -634,7 +636,7 @@
             dirname = os.path.dirname(oldval)
         else:
             dirname = os.path.expanduser("~")
-        fname = QtGui.QFileDialog.getOpenFileName(self, 'Locate Qt Stylesheet qss file', dirname,
+        fname = QtWidgets.QFileDialog.getOpenFileName(self, 'Locate Qt Stylesheet qss file', dirname,
                                                   "qss file (*.qss)")
         if self.setCustomQssfile(fname):
             for a in self.uiMenuThemeGroup.actions():
@@ -645,7 +647,7 @@
         if fname and os.path.isfile(fname):
             # noinspection PyBroadException
             try:
-                QtGui.QApplication.instance().setStyleSheet(open(fname).read())
+                QtWidgets.QApplication.instance().setStyleSheet(open(fname).read())
                 Settings.setValue(Settings.COLORTHEME, 'custom')
                 Settings.setValue(Settings.CUSTOM_THEME_FILENAME, fname)
                 ColorTheme.SELECTED = ColorTheme.SAFE
@@ -654,11 +656,11 @@
                 pass
 
     def setStyleBuiltin(self, styleName):
-        if styleName in QtGui.QStyleFactory.keys():
+        if styleName in QtWidgets.QStyleFactory.keys():
             ColorTheme.SELECTED = ColorTheme.LIGHT
-            QtGui.QApplication.instance().setStyleSheet('')
-            QtGui.QApplication.setStyle(QtGui.QStyleFactory.create(styleName))
-            QtGui.QApplication.setPalette(QtGui.QApplication.style().standardPalette())
+            QtWidgets.QApplication.instance().setStyleSheet('')
+            QtWidgets.QApplication.setStyle(QtWidgets.QStyleFactory.create(styleName))
+            QtWidgets.QApplication.setPalette(QtWidgets.QApplication.style().standardPalette())
             Settings.setValue(Settings.COLORTHEME, styleName)
 
     def setStyleCallback(self, styleName):
@@ -768,124 +770,124 @@
             if boolean:
                 SetChallengeSound(GetChallengeSoundFile(self.sender().text()))
 
-        self.uiMenuChallengeSoundGroup = QtGui.QActionGroup(self.uiChallengeSoundMenu, exclusive=True)
+        self.uiMenuChallengeSoundGroup = QtWidgets.QActionGroup(self.uiChallengeSoundMenu, exclusive=True)
 
-        self.uiactionBreakrev = QtGui.QAction("breakrev", self)
+        self.uiactionBreakrev = QtWidgets.QAction("breakrev", self)
         self.uiactionBreakrev.setCheckable(True)
         self.uiactionBreakrev.toggled.connect(onChallengeSoundToggled)
         self.uiChallengeSoundMenu.addAction(self.uiMenuChallengeSoundGroup.addAction(self.uiactionBreakrev))
 
-        self.uiactionCaptcomm = QtGui.QAction("captcomm", self)
+        self.uiactionCaptcomm = QtWidgets.QAction("captcomm", self)
         self.uiactionCaptcomm.setCheckable(True)
         self.uiactionCaptcomm.toggled.connect(onChallengeSoundToggled)
         self.uiChallengeSoundMenu.addAction(self.uiMenuChallengeSoundGroup.addAction(self.uiactionCaptcomm))
 
-        self.uiactionDdsom = QtGui.QAction("ddsom", self)
+        self.uiactionDdsom = QtWidgets.QAction("ddsom", self)
         self.uiactionDdsom.setCheckable(True)
         self.uiactionDdsom.toggled.connect(onChallengeSoundToggled)
         self.uiChallengeSoundMenu.addAction(self.uiMenuChallengeSoundGroup.addAction(self.uiactionDdsom))
 
-        self.uiactionDoubledr = QtGui.QAction("doubledr", self)
+        self.uiactionDoubledr = QtWidgets.QAction("doubledr", self)
         self.uiactionDoubledr.setCheckable(True)
         self.uiactionDoubledr.toggled.connect(onChallengeSoundToggled)
         self.uiChallengeSoundMenu.addAction(self.uiMenuChallengeSoundGroup.addAction(self.uiactionDoubledr))
 
-        self.uiactionGarou = QtGui.QAction("garou", self)
+        self.uiactionGarou = QtWidgets.QAction("garou", self)
         self.uiactionGarou.setCheckable(True)
         self.uiactionGarou.toggled.connect(onChallengeSoundToggled)
         self.uiChallengeSoundMenu.addAction(self.uiMenuChallengeSoundGroup.addAction(self.uiactionGarou))
 
-        self.uiactionJojobane = QtGui.QAction("jojobane", self)
+        self.uiactionJojobane = QtWidgets.QAction("jojobane", self)
         self.uiactionJojobane.setCheckable(True)
         self.uiactionJojobane.toggled.connect(onChallengeSoundToggled)
         self.uiChallengeSoundMenu.addAction(self.uiMenuChallengeSoundGroup.addAction(self.uiactionJojobane))
 
-        self.uiactionKarnovr = QtGui.QAction("karnovr", self)
+        self.uiactionKarnovr = QtWidgets.QAction("karnovr", self)
         self.uiactionKarnovr.setCheckable(True)
         self.uiactionKarnovr.toggled.connect(onChallengeSoundToggled)
         self.uiChallengeSoundMenu.addAction(self.uiMenuChallengeSoundGroup.addAction(self.uiactionKarnovr))
 
-        self.uiactionKof2002 = QtGui.QAction("kof2002", self)
+        self.uiactionKof2002 = QtWidgets.QAction("kof2002", self)
         self.uiactionKof2002.setCheckable(True)
         self.uiactionKof2002.toggled.connect(onChallengeSoundToggled)
         self.uiChallengeSoundMenu.addAction(self.uiMenuChallengeSoundGroup.addAction(self.uiactionKof2002))
 
-        self.uiactionKof98 = QtGui.QAction("kof98", self)
+        self.uiactionKof98 = QtWidgets.QAction("kof98", self)
         self.uiactionKof98.setCheckable(True)
         self.uiactionKof98.toggled.connect(onChallengeSoundToggled)
         self.uiChallengeSoundMenu.addAction(self.uiMenuChallengeSoundGroup.addAction(self.uiactionKof98))
 
-        self.uiactionMatrim = QtGui.QAction("matrim", self)
+        self.uiactionMatrim = QtWidgets.QAction("matrim", self)
         self.uiactionMatrim.setCheckable(True)
         self.uiactionMatrim.toggled.connect(onChallengeSoundToggled)
         self.uiChallengeSoundMenu.addAction(self.uiMenuChallengeSoundGroup.addAction(self.uiactionMatrim))
 
-        self.uiactionMshvsf = QtGui.QAction("mshvsf", self)
+        self.uiactionMshvsf = QtWidgets.QAction("mshvsf", self)
         self.uiactionMshvsf.setCheckable(True)
         self.uiactionMshvsf.toggled.connect(onChallengeSoundToggled)
         self.uiChallengeSoundMenu.addAction(self.uiMenuChallengeSoundGroup.addAction(self.uiactionMshvsf))
 
-        self.uiactionMslug3 = QtGui.QAction("mslug3", self)
+        self.uiactionMslug3 = QtWidgets.QAction("mslug3", self)
         self.uiactionMslug3.setCheckable(True)
         self.uiactionMslug3.toggled.connect(onChallengeSoundToggled)
         self.uiChallengeSoundMenu.addAction(self.uiMenuChallengeSoundGroup.addAction(self.uiactionMslug3))
 
-        self.uiactionMvsc = QtGui.QAction("mvsc", self)
+        self.uiactionMvsc = QtWidgets.QAction("mvsc", self)
         self.uiactionMvsc.setCheckable(True)
         self.uiactionMvsc.toggled.connect(onChallengeSoundToggled)
         self.uiChallengeSoundMenu.addAction(self.uiMenuChallengeSoundGroup.addAction(self.uiactionMvsc))
 
-        self.uiactionRbffspec = QtGui.QAction("rbffspec", self)
+        self.uiactionRbffspec = QtWidgets.QAction("rbffspec", self)
         self.uiactionRbffspec.setCheckable(True)
         self.uiactionRbffspec.toggled.connect(onChallengeSoundToggled)
         self.uiChallengeSoundMenu.addAction(self.uiMenuChallengeSoundGroup.addAction(self.uiactionRbffspec))
 
-        self.uiactionRingdest = QtGui.QAction("ringdest", self)
+        self.uiactionRingdest = QtWidgets.QAction("ringdest", self)
         self.uiactionRingdest.setCheckable(True)
         self.uiactionRingdest.toggled.connect(onChallengeSoundToggled)
         self.uiChallengeSoundMenu.addAction(self.uiMenuChallengeSoundGroup.addAction(self.uiactionRingdest))
 
-        self.uiactionRotd = QtGui.QAction("rotd", self)
+        self.uiactionRotd = QtWidgets.QAction("rotd", self)
         self.uiactionRotd.setCheckable(True)
         self.uiactionRotd.toggled.connect(onChallengeSoundToggled)
         self.uiChallengeSoundMenu.addAction(self.uiMenuChallengeSoundGroup.addAction(self.uiactionRotd))
 
-        self.uiactionSamsho2 = QtGui.QAction("samsho2", self)
+        self.uiactionSamsho2 = QtWidgets.QAction("samsho2", self)
         self.uiactionSamsho2.setCheckable(True)
         self.uiactionSamsho2.toggled.connect(onChallengeSoundToggled)
         self.uiChallengeSoundMenu.addAction(self.uiMenuChallengeSoundGroup.addAction(self.uiactionSamsho2))
 
-        self.uiactionSf2 = QtGui.QAction("sf2", self)
+        self.uiactionSf2 = QtWidgets.QAction("sf2", self)
         self.uiactionSf2.setCheckable(True)
         self.uiactionSf2.toggled.connect(onChallengeSoundToggled)
         self.uiChallengeSoundMenu.addAction(self.uiMenuChallengeSoundGroup.addAction(self.uiactionSf2))
 
-        self.uiactionSfiii3n = QtGui.QAction("sfiii3n", self)
+        self.uiactionSfiii3n = QtWidgets.QAction("sfiii3n", self)
         self.uiactionSfiii3n.setCheckable(True)
         self.uiactionSfiii3n.toggled.connect(onChallengeSoundToggled)
         self.uiChallengeSoundMenu.addAction(self.uiMenuChallengeSoundGroup.addAction(self.uiactionSfiii3n))
 
-        self.uiactionSsf2t = QtGui.QAction("ssf2t", self)
+        self.uiactionSsf2t = QtWidgets.QAction("ssf2t", self)
         self.uiactionSsf2t.setCheckable(True)
         self.uiactionSsf2t.toggled.connect(onChallengeSoundToggled)
         self.uiChallengeSoundMenu.addAction(self.uiMenuChallengeSoundGroup.addAction(self.uiactionSsf2t))
 
-        self.uiactionSvc = QtGui.QAction("svc", self)
+        self.uiactionSvc = QtWidgets.QAction("svc", self)
         self.uiactionSvc.setCheckable(True)
         self.uiactionSvc.toggled.connect(onChallengeSoundToggled)
         self.uiChallengeSoundMenu.addAction(self.uiMenuChallengeSoundGroup.addAction(self.uiactionSvc))
 
-        self.uiactionVsav = QtGui.QAction("vsav", self)
+        self.uiactionVsav = QtWidgets.QAction("vsav", self)
         self.uiactionVsav.setCheckable(True)
         self.uiactionVsav.toggled.connect(onChallengeSoundToggled)
         self.uiChallengeSoundMenu.addAction(self.uiMenuChallengeSoundGroup.addAction(self.uiactionVsav))
 
-        self.uiactionWhp = QtGui.QAction("whp", self)
+        self.uiactionWhp = QtWidgets.QAction("whp", self)
         self.uiactionWhp.setCheckable(True)
         self.uiactionWhp.toggled.connect(onChallengeSoundToggled)
         self.uiChallengeSoundMenu.addAction(self.uiMenuChallengeSoundGroup.addAction(self.uiactionWhp))
 
-        self.uiactionXmvsf = QtGui.QAction("xmvsf", self)
+        self.uiactionXmvsf = QtWidgets.QAction("xmvsf", self)
         self.uiactionXmvsf.setCheckable(True)
         self.uiactionXmvsf.toggled.connect(onChallengeSoundToggled)
         self.uiChallengeSoundMenu.addAction(self.uiMenuChallengeSoundGroup.addAction(self.uiactionXmvsf))
@@ -893,7 +895,7 @@
 
     def setupMenuSmoothing(self):
         # unfortunately Qt Designer doesn't support QActionGroup, we have to code it up
-        self.uiMenuSmoothingGroup = QtGui.QActionGroup(self.uiSmoothingMenu, exclusive=True)
+        self.uiMenuSmoothingGroup = QtWidgets.QActionGroup(self.uiSmoothingMenu, exclusive=True)
 
         def onSmoothingToggled(boolean):
             if boolean:
@@ -903,7 +905,7 @@
 
         desc = defaultdictinit({0: ' More jerky', 1: ' Default', 10: ' Laggy'})
         for smooth in range(11):
-            act = QtGui.QAction('&' + str(smooth) + desc[smooth], self)
+            act = QtWidgets.QAction('&' + str(smooth) + desc[smooth], self)
             act.setCheckable(True)
             act.toggled.connect(onSmoothingToggled)
             self.uiSmoothingMenu.addAction(self.uiMenuSmoothingGroup.addAction(act))
@@ -926,26 +928,26 @@
                 ret += c
             return ret
 
-        self.uiMenuThemeGroup = QtGui.QActionGroup(self.uiThemeMenu, exclusive=True)
+        self.uiMenuThemeGroup = QtWidgets.QActionGroup(self.uiThemeMenu, exclusive=True)
 
-        self.uiGNGThemeAct = QtGui.QAction(actionTitle("FightCade"), self)
+        self.uiGNGThemeAct = QtWidgets.QAction(actionTitle("FightCade"), self)
         self.uiGNGThemeAct.setCheckable(True)
         self.uiGNGThemeAct.toggled.connect(ColorTheme.setGNGTheme)
         self.uiThemeMenu.addAction(self.uiMenuThemeGroup.addAction(self.uiGNGThemeAct))
 
-        self.uiDarkThemeAct = QtGui.QAction(actionTitle("Dark Orange"), self)
+        self.uiDarkThemeAct = QtWidgets.QAction(actionTitle("Dark Orange"), self)
         self.uiDarkThemeAct.setCheckable(True)
         self.uiDarkThemeAct.toggled.connect(ColorTheme.setDarkTheme)
         self.uiThemeMenu.addAction(self.uiMenuThemeGroup.addAction(self.uiDarkThemeAct))
 
-        for k in QtGui.QStyleFactory.keys():
-            act = QtGui.QAction(actionTitle(k), self)
+        for k in QtWidgets.QStyleFactory.keys():
+            act = QtWidgets.QAction(actionTitle(k), self)
             act.setCheckable(True)
             act.toggled.connect(self.setStyleCallback(k))
             self.uiThemeMenu.addAction(self.uiMenuThemeGroup.addAction(act))
             cleanname = self.buildInStyleToActionName(k)
             setattr(self, cleanname, act)
-        self.uiCustomQssFileAct = QtGui.QAction(actionTitle("Custom Qss stylesheet"), self)
+        self.uiCustomQssFileAct = QtWidgets.QAction(actionTitle("Custom Qss stylesheet"), self)
         self.uiCustomQssFileAct.triggered.connect(self.setCustomQss)
         self.uiThemeMenu.addAction(self.uiCustomQssFileAct)
 
@@ -954,7 +956,7 @@
         self.uiPlayersTableV.setModel(model)
         self.uiPlayersTableV.clicked.connect(model.onCellClicked)
         self.uiPlayersTableV.doubleClicked.connect(model.onCellDoubleClicked)
-        self.uiPlayersTableV.setSelectionBehavior(QtGui.QAbstractItemView.SelectRows)
+        self.uiPlayersTableV.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
         self.uiPlayersTableV.verticalHeader().setVisible(False)
         hh = self.uiPlayersTableV.horizontalHeader()
         hh.setMinimumSectionSize(25)
@@ -968,9 +970,9 @@
         hh.resizeSection(PlayerModel.IGNORE, 25)
         hh.resizeSection(PlayerModel.PLAYER, 165)
         hh.resizeSection(PlayerModel.OPPONENT, 165)
-        hh.setResizeMode(PlayerModel.STATE, QtGui.QHeaderView.Fixed)
-        hh.setResizeMode(PlayerModel.PING, QtGui.QHeaderView.Fixed)
-        hh.setResizeMode(PlayerModel.IGNORE, QtGui.QHeaderView.Fixed)
+        hh.setSectionResizeMode(PlayerModel.STATE, QtWidgets.QHeaderView.Fixed)
+        hh.setSectionResizeMode(PlayerModel.PING, QtWidgets.QHeaderView.Fixed)
+        hh.setSectionResizeMode(PlayerModel.IGNORE, QtWidgets.QHeaderView.Fixed)
         self.uiPlayersTableV.setSortingEnabled(True)
         self.uiPlayersTableV.sortByColumn(PlayerModel.DEFAULT_SORT, Qt.AscendingOrder)
         hh.sortIndicatorChanged.connect(self.sortIndicatorChanged)
--- a/ggpo/gui/logindialog.py
+++ b/ggpo/gui/logindialog.py
@@ -1,5 +1,5 @@
 # -*- coding: utf-8 -*-
-from PyQt4 import QtGui
+from PyQt5 import QtWidgets
 import base64
 import ggpo.gui
 from ggpo.common.runtime import *
@@ -9,7 +9,7 @@
 from ggpo.gui.ui.logindialog_ui import Ui_DialogLogin
 
 
-class LoginDialog(QtGui.QDialog, Ui_DialogLogin):
+class LoginDialog(QtWidgets.QDialog, Ui_DialogLogin):
     def __init__(self, parent=None):
         super(LoginDialog, self).__init__(parent)
         # ggpo.gui.loadUi(__file__, self)
@@ -78,7 +78,7 @@
 
         if not self.controller.connectTcp():
             # noinspection PyCallByClass,PyTypeChecker,PyArgumentList
-            QtGui.QMessageBox.warning(self, 'Error', "Cannot connect to fightcade.com")
+            QtWidgets.QMessageBox.warning(self, 'Error', "Cannot connect to fightcade.com")
             self.uiLoginBtn.setEnabled(True)
             return -1
 
@@ -110,7 +110,7 @@
         controller.sigStatusMessage.connect(self.onStatusMessage)
 
     def showEvent(self, QShowEvent):
-        QtGui.QDialog.showEvent(self, QShowEvent)
+        QtWidgets.QDialog.showEvent(self, QShowEvent)
         versionDiff = checkUpdate()
         if versionDiff > 0:
             self.uiNewVersionLink.setVisible(True)
--- a/ggpo/gui/playermodel.py
+++ b/ggpo/gui/playermodel.py
@@ -1,8 +1,8 @@
 # -*- coding: utf-8 -*-
 import operator
 
-from PyQt4 import QtCore, QtGui
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui
+from PyQt5.QtCore import Qt
 
 
 #noinspection PyClassHasNoInit
@@ -237,7 +237,9 @@
                 keyfunc = lambda x: getter(x).lower()
             else:
                 keyfunc = getter
-            self.emit(QtCore.SIGNAL("layoutAboutToBeChanged()"))
+            layoutAboutToBeChanged = QtCore.pyqtSignal()
+            self.layoutAboutToBeChanged.emit()
             self.players = sorted(self.players, key=keyfunc, reverse=reverse)
             self.players = sorted(self.players, key=operator.itemgetter(PlayerModel.STATE))
-            self.emit(QtCore.SIGNAL("layoutChanged()"))
+            layoutChanged = QtCore.pyqtSignal()
+            self.layoutChanged.emit()
--- a/ggpo/gui/savestatesdialog.py
+++ b/ggpo/gui/savestatesdialog.py
@@ -2,8 +2,8 @@
 from glob import glob
 import fnmatch
 import os
-from PyQt4 import QtCore, QtGui
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtWidgets
+from PyQt5.QtCore import Qt
 import operator
 from ggpo.common.allgames import allgames
 from ggpo.common.settings import Settings
@@ -99,7 +99,7 @@
         self.emit(QtCore.SIGNAL("layoutChanged()"))
 
 
-class SavestatesDialog(QtGui.QDialog, Ui_SavestatesDialog):
+class SavestatesDialog(QtWidgets.QDialog, Ui_SavestatesDialog):
     def __init__(self, *args, **kwargs):
         super(SavestatesDialog, self).__init__(*args, **kwargs)
         self.setupUi(self)
--- a/ggpo/gui/__init__.py
+++ b/ggpo/gui/__init__.py
@@ -1,14 +1,14 @@
 # -*- coding: utf-8 -*-
 import os.path
 
-import PyQt4.uic
+import PyQt5.uic
 
 __all__ = ['loadUi']
 
 
 def loadUi(modpath, widget):
     """
-    Uses the PyQt4.uic.loadUI method to load the inputed ui file associated
+    Uses the PyQt5.uic.loadUI method to load the inputed ui file associated
     with the given module path and widget class information on the inputed
     widget.
 
@@ -21,4 +21,4 @@
     uifile = os.path.join(basepath, 'ui/%s.ui' % basename)
 
     # load the ui
-    PyQt4.uic.loadUi(uifile, widget)
+    PyQt5.uic.loadUi(uifile, widget)
