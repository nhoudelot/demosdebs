--- a/main.cpp
+++ b/main.cpp
@@ -26,6 +26,10 @@
 int OPENGL_YRES=WINDOW_HEIGHT;
 bool OPENGL_FULLSCREEN;
 
+Uint32 windowID;
+#define DEMO_XASPECT 4.0f
+#define DEMO_YASPECT 3.0f
+
 Vector clearcolor;
 
 Texture *flare;
@@ -106,6 +110,7 @@
 
 		kello.start();
 		SDL_Event event;
+		Uint32 windowID = SDL_GetWindowID(win.sdlWindow);
 		while(!done)
 		{
 #if defined(OS_X) && defined(FULLSCREEN)
@@ -123,6 +128,36 @@
 				default:
 					break;
 				}
+			case SDL_WINDOWEVENT:
+				if (event.window.windowID == windowID)  {
+					if (event.window.event == SDL_WINDOWEVENT_RESIZED)  {
+						int w = event.window.data1;
+						int h = event.window.data2;
+						int new_w;
+						int new_h;
+						int x;
+						int y;
+						float aspect;
+						/* Prevent division by zero */
+						if (h == 0) {
+						    h = 1;
+						}
+
+						aspect = (float)w / (float)h;
+						if (aspect > DEMO_XASPECT / DEMO_YASPECT) {
+							new_w = (int)((float)h * DEMO_XASPECT / DEMO_YASPECT);
+							x += (w - new_w) / 2;
+							w = new_w;
+						} else if (aspect < DEMO_XASPECT / DEMO_YASPECT) {
+							new_h = (int)((float)w * DEMO_YASPECT / DEMO_XASPECT);
+							y += (h - new_h) / 2;
+							h = new_h;
+						}
+						OPENGL_XRES = w;
+						OPENGL_YRES = h;
+						
+						}
+					}
 			default:
 				break;
 			}
@@ -137,7 +172,7 @@
 				glLineWidth(1.0f);
 				glDepthMask(1);
 				glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
-				glViewport(0, 0, OPENGL_XRES, OPENGL_YRES);
+				glViewport(0,0, OPENGL_XRES, OPENGL_YRES);
 
 /*				float kerroin = 1.0f;
                                 if (GetAsyncKeyState(VK_SHIFT))
@@ -152,7 +187,7 @@
 
 				glMatrixMode(GL_PROJECTION);
 				glLoadIdentity();
-				gluPerspective(45.0f, OPENGL_XRES/(float)OPENGL_YRES, 0.01f, 1000.0f);
+				gluPerspective(45.0f, DEMO_XASPECT/(float)DEMO_YASPECT, 0.01f, 1000.0f);
 				glMatrixMode(GL_MODELVIEW);
 				glLoadIdentity();
 				const int introloppu = 298000;
