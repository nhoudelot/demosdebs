--- a/ds/io/music.cpp
+++ b/ds/io/music.cpp
@@ -21,26 +21,26 @@
 
 namespace DS
 {
-F_CALLBACKAPI void* cbopen(const char* pName)
+F_CALLBACK void* cbopen(const char* pName)
 {
 	return (void*)pName;         // :D
 }
 
-void F_CALLBACKAPI cbclose(void* pHandle) {
+void F_CALLBACK cbclose(void* pHandle) {
 }
 
-int F_CALLBACKAPI cbread(void* pBuffer, int size, void* pHandle)
+int F_CALLBACK cbread(void* pBuffer, int size, void* pHandle)
 {
 	return ((MemFile*)pHandle)->Read(pBuffer, size);
 }
 
-int F_CALLBACKAPI cbseek(void* pHandle, int pos, signed char mode)
+int F_CALLBACK cbseek(void* pHandle, int pos, signed char mode)
 {
 	((MemFile*)pHandle)->Seek(pos, mode);
 	return 0;
 }
 
-int F_CALLBACKAPI cbtell(void* pHandle)
+int F_CALLBACK cbtell(void* pHandle)
 {
 	return ((MemFile*)pHandle)->Tell();
 }
@@ -64,16 +64,15 @@
 Music::~Music()
 {
 	if(m_pSong)
-		FMUSIC_FreeSong(m_pSong);
+		FMOD_Sound_Release(m_pSong);
 }
 
 void Music::Init(int samplerate)
 {
 	static char* fn = "[Music::Init]";
-	if(!FSOUND_Init(samplerate, 32, 0))
-		cout << fn << " Failed to init sound." << endl;
-	else
-		m_bHasInit = true;
+	FMOD_System_Create(&system);
+	FMOD_System_Init(system, 1, FMOD_INIT_NORMAL, NULL);
+	m_bHasInit = true;
 }
 
 void Music::Load(const char* pFile)
@@ -85,12 +84,11 @@
 //			m_pSong = FMUSIC_LoadSong(((string)"../data/" + pFile).c_str());
 //			m_pSong = FMUSIC_LoadSong("ps.xm");
 //			#else
-		m_pSong = FMUSIC_LoadSong((char*)m_pDataReader->GetFile(pFile));
+		FMOD_System_CreateSound(system, (char*)m_pDataReader->GetFile(pFile), FMOD_SOFTWARE | FMOD_CREATESTREAM, 0, &m_pSong);
 //			#endif
-		FSOUND_SetVolume(FSOUND_ALL, m_volume);
 		if(!m_pSong)
 			cout << fn << " Failed to load music." << endl;
-		FMUSIC_SetLooping(m_pSong, false);
+		FMOD_Sound_SetLoopCount(m_pSong, 1);
 		m_bHasLoad = true;
 	}
 }
@@ -98,20 +96,23 @@
 void Music::Play()
 {
 	if(m_bHasLoad)
-		if(!FMUSIC_PlaySong(m_pSong))
-			cout << "[Music::Play] Failed to play music." << endl;
+		if (m_bisPaused)
+			FMOD_Channel_SetPaused(channel,0);
+		else
+			FMOD_System_PlaySound(system, FMOD_CHANNEL_FREE, m_pSong, 0, &channel);
+			FMOD_Sound_SetMusicChannelVolume(m_pSong, channel, &m_volume);
 }
 
 void Music::Stop()
 {
 	if(m_bHasLoad)
-		FSOUND_StopSound(FSOUND_ALL);
+		FMOD_Channel_SetPaused(channel,0);
 }
 
 void Music::SetVolume(int volume)
 {
 	m_volume = volume;
-	FSOUND_SetVolume(FSOUND_ALL, m_volume);
+	FMOD_Sound_SetMusicChannelVolume(m_pSong, channel, &volume);
 }
 
 int Music::GetVolume()
--- a/ds/io/music.h
+++ b/ds/io/music.h
@@ -19,8 +19,8 @@
 #define MUSIC_H
 
 #include "../common.h"
-#include <fmod.h>
 #include "datareader.h"
+#include <fmodex/fmod.h>
 
 namespace DS
 {
@@ -39,7 +39,9 @@
 bool m_bHasLoad;
 int m_volume;
 DataReader* m_pDataReader;
-FMUSIC_MODULE* m_pSong;
+FMOD_SYSTEM *system;
+FMOD_SOUND *m_pSong;
+FMOD_CHANNEL *channel;
 };
 }
 
