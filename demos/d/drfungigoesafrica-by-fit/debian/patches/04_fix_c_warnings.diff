--- a/jpeg.c
+++ b/jpeg.c
@@ -4,6 +4,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <jpeglib.h>
+#include <string.h>
 
 unsigned char *loadJPG(char *path,int *width,int *height)
 {
--- a/tausta.c
+++ b/tausta.c
@@ -1,7 +1,7 @@
 
 #include "include.h"
 #include "tausta.h"
-
+#include <stdlib.h>
 
 #define MAX_X 16
 #define MAX_Y 16
--- a/cool_mzx/sd_mix.c
+++ b/cool_mzx/sd_mix.c
@@ -52,6 +52,8 @@
 */
 
 #include <math.h>
+#include <stdlib.h>
+#include <string.h>
 #include "sd_main.h"
 #include "sd_mix.h"
 #include "sdfx_delay.h"
@@ -305,100 +307,100 @@
 	s->target_bus = &mix_buses[0];
 } /* sd_mix_initchannel */
 
-void sd_mix_init (int rate, int blocksize)
-{
-	int	i,n,m;
-	struct SDFX_FORMANT_FILTER *formantfilter;
-
-
-	sd_mix_rate = rate;
-
-	for (i=0; i<SD_MAXBUSES; i++)
-	{
-		mix_bus_init(&mix_buses[i], blocksize, 2);
-	}
-
-
-	for (i=0; i<SD_MAXCHANNELS; i++)
-	{
-		sd_mix_initchannel(&mix_channels[i]);
-		sd_mix_initchannel(&mix_realchannels[i]);
-	}
-
-	for (i=0; i<SD_MAXSAMPLES; i++)
-	{
-		sd_mix_initsample (&mix_samples[i]);
-	}
-
-	/* Luodaan efektejä! jee jee */
-
-
-
-	/* --------- 1 -------- */
-	/* VÄHÄN kovakoodattu! toimii jos toimii  */
-	mix_samples[9].target_bus = &mix_buses[1]; // virveli ja clapsi
-	mix_samples[10].target_bus = &mix_buses[1]; // virveli ja clapsi
-	mix_samples[11].target_bus = &mix_buses[1]; // virveli ja clapsi
-	mix_samples[12].target_bus = &mix_buses[1]; // virveli ja clapsi
-	mix_samples[21].target_bus = &mix_buses[1];
-
-	mix_samples[1].target_bus = &mix_buses[1]; // liidit
-	mix_samples[2].target_bus = &mix_buses[1]; // liidit
-	mix_samples[5].target_bus = &mix_buses[1]; // liidit
-	mix_samples[6].target_bus = &mix_buses[1]; // liidit
-	mix_samples[7].target_bus = &mix_buses[1]; // liidit
-	mix_samples[8].target_bus = &mix_buses[1]; // liidit
-
-	mix_samples[19].target_bus = &mix_buses[1]; // liidit
-
-	/* --------- 2 -------- */
-
-	mix_samples[3].target_bus = &mix_buses[2]; 
-	mix_samples[4].target_bus = &mix_buses[2]; 
-	
-	/* --------- 3 -------- */
-
-	mix_bus_add_input(&mix_buses[3], &mix_buses[2],	1.0);
-/*	mix_bus_add_effect(
-        	&mix_buses[3], 
-		sdfx_delay2_create(
-			2,
-			3000, 4500,
-			0.7, 0.71,
-			0.8, 0.4, 0,
-			1.0, 1.0,
-			0.05, 0.05,
-			0.000021, 0.000022)
-	); */
-	mix_bus_add_effect(&mix_buses[3], sdfx_delay_create(2, 440, 850, 0.5993, 0.5398, 0.5, 0.5));
-	mix_bus_add_effect(&mix_buses[3], sdfx_formant_filter_create(2, 3));
-/*	mix_bus_add_effect(
-        	&mix_buses[3], 
-		sdfx_delay2_create(
-			2,
-			1250, 1245,
-			0.4, 0.41,
-			0.6, 0.6, 0,
-			1.0, 1.0,
-			0.08, 0.09,
-			0.000021, 0.000022)
-	); */
-
-
-	/* --------- 4 -------- */
-	mix_bus_add_input(&mix_buses[4], &mix_buses[1],	1.0);
-	mix_bus_add_input(&mix_buses[4], &mix_buses[3],	1.0);
-	mix_bus_add_effect(&mix_buses[4], sdfx_delay_create(2, 15140, 16850, 0.4393, 0.4298, 1.0, 0.9));
-
-
-	// add inputs for master bus
-	mix_bus_add_input(&mix_buses[MASTER_BUS], &mix_buses[0], 0.6);
-	mix_bus_add_input(&mix_buses[MASTER_BUS], &mix_buses[1], 0.5);
-	mix_bus_add_input(&mix_buses[MASTER_BUS], &mix_buses[2], 0.5);
-	mix_bus_add_input(&mix_buses[MASTER_BUS], &mix_buses[3], 0.5);
-	mix_bus_add_input(&mix_buses[MASTER_BUS], &mix_buses[4], 0.3);
-
-} /* sd_mix_init */
+void sd_mix_init (int rate, int blocksize)
+{
+	int	i,n,m;
+	struct SDFX_FORMANT_FILTER *formantfilter;
+
+
+	sd_mix_rate = rate;
+
+	for (i=0; i<SD_MAXBUSES; i++)
+	{
+		mix_bus_init(&mix_buses[i], blocksize, 2);
+	}
+
+
+	for (i=0; i<SD_MAXCHANNELS; i++)
+	{
+		sd_mix_initchannel(&mix_channels[i]);
+		sd_mix_initchannel(&mix_realchannels[i]);
+	}
+
+	for (i=0; i<SD_MAXSAMPLES; i++)
+	{
+		sd_mix_initsample (&mix_samples[i]);
+	}
+
+	/* Luodaan efektejä! jee jee */
+
+
+
+	/* --------- 1 -------- */
+	/* VÄHÄN kovakoodattu! toimii jos toimii  */
+	mix_samples[9].target_bus = &mix_buses[1]; // virveli ja clapsi
+	mix_samples[10].target_bus = &mix_buses[1]; // virveli ja clapsi
+	mix_samples[11].target_bus = &mix_buses[1]; // virveli ja clapsi
+	mix_samples[12].target_bus = &mix_buses[1]; // virveli ja clapsi
+	mix_samples[21].target_bus = &mix_buses[1];
+
+	mix_samples[1].target_bus = &mix_buses[1]; // liidit
+	mix_samples[2].target_bus = &mix_buses[1]; // liidit
+	mix_samples[5].target_bus = &mix_buses[1]; // liidit
+	mix_samples[6].target_bus = &mix_buses[1]; // liidit
+	mix_samples[7].target_bus = &mix_buses[1]; // liidit
+	mix_samples[8].target_bus = &mix_buses[1]; // liidit
+
+	mix_samples[19].target_bus = &mix_buses[1]; // liidit
+
+	/* --------- 2 -------- */
+
+	mix_samples[3].target_bus = &mix_buses[2]; 
+	mix_samples[4].target_bus = &mix_buses[2]; 
+	
+	/* --------- 3 -------- */
+
+	mix_bus_add_input(&mix_buses[3], &mix_buses[2],	1.0);
+/*	mix_bus_add_effect(
+        	&mix_buses[3], 
+		sdfx_delay2_create(
+			2,
+			3000, 4500,
+			0.7, 0.71,
+			0.8, 0.4, 0,
+			1.0, 1.0,
+			0.05, 0.05,
+			0.000021, 0.000022)
+	); */
+	mix_bus_add_effect(&mix_buses[3], sdfx_delay_create(2, 440, 850, 0.5993, 0.5398, 0.5, 0.5));
+	mix_bus_add_effect(&mix_buses[3], sdfx_formant_filter_create(2, 3));
+/*	mix_bus_add_effect(
+        	&mix_buses[3], 
+		sdfx_delay2_create(
+			2,
+			1250, 1245,
+			0.4, 0.41,
+			0.6, 0.6, 0,
+			1.0, 1.0,
+			0.08, 0.09,
+			0.000021, 0.000022)
+	); */
+
+
+	/* --------- 4 -------- */
+	mix_bus_add_input(&mix_buses[4], &mix_buses[1],	1.0);
+	mix_bus_add_input(&mix_buses[4], &mix_buses[3],	1.0);
+	mix_bus_add_effect(&mix_buses[4], sdfx_delay_create(2, 15140, 16850, 0.4393, 0.4298, 1.0, 0.9));
+
+
+	// add inputs for master bus
+	mix_bus_add_input(&mix_buses[MASTER_BUS], &mix_buses[0], 0.6);
+	mix_bus_add_input(&mix_buses[MASTER_BUS], &mix_buses[1], 0.5);
+	mix_bus_add_input(&mix_buses[MASTER_BUS], &mix_buses[2], 0.5);
+	mix_bus_add_input(&mix_buses[MASTER_BUS], &mix_buses[3], 0.5);
+	mix_bus_add_input(&mix_buses[MASTER_BUS], &mix_buses[4], 0.3);
+
+} /* sd_mix_init */
 
 /* ---------------------- VARSINAINEN MIKSAUS -------------------- */
 
@@ -517,7 +519,7 @@
     static int i;
 
 #define BITS 16
-#define RAND_MAX 0x7fff
+//#define RAND_MAX 0x7fff
 
 /* dithering code by Paul Kellet / from musicdsp.org archives */
 
--- a/cool_mzx/sdfx_lphp_filter.c
+++ b/cool_mzx/sdfx_lphp_filter.c
@@ -1,6 +1,7 @@
 
 #include <math.h>
 #include <assert.h>
+#include <stdlib.h>
 #include "sdfx_lphp_filter.h"
 
 
--- a/cool_mzx/sdfx_formant_filter.c
+++ b/cool_mzx/sdfx_formant_filter.c
@@ -1,6 +1,7 @@
 
 #include <math.h>
 #include <assert.h>
+#include <stdlib.h>
 #include "sdfx_formant_filter.h"
 
 
--- a/cool_mzx/sdfx_delay2.c
+++ b/cool_mzx/sdfx_delay2.c
@@ -13,6 +13,7 @@
 
 #include <math.h>
 #include <assert.h>
+#include <stdlib.h>
 #include "sdfx_delay2.h"
 
 /* Sets delaytime and read pointer. The write pointer is not moved. */
--- a/cool_mzx/sdfx_delay.c
+++ b/cool_mzx/sdfx_delay.c
@@ -1,6 +1,7 @@
 
 #include <math.h>
 #include <assert.h>
+#include <stdlib.h>
 #include "sdfx_delay.h"
 
 
